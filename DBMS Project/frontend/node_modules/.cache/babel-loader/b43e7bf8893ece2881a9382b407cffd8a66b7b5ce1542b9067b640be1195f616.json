{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from \"react\";\nimport { fetchNormalizedTables, fetchCodeForStep, fetchTableHTML, validateStep } from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateContextProvider = ({\n  children\n}) => {\n  _s();\n  const [workflowSteps, setWorkflowSteps] = useState([]); // For OutputPanel shapes\n  const [codeSnippet, setCodeSnippet] = useState(\"\"); // For CodePanel\n  const [messages, setMessages] = useState([]); // For MessagePanel\n  const [normalizedTables, setNormalizedTables] = useState([]); // Dropdown Tables\n  const [selectedTableHTML, setSelectedTableHTML] = useState(\"\"); // Table Content\n\n  // Fetch tables on mount (MessagePanel dropdown)\n  useEffect(() => {\n    async function loadTables() {\n      try {\n        const tables = await fetchNormalizedTables();\n        setNormalizedTables(tables);\n      } catch (err) {\n        console.error(\"Error fetching tables:\", err);\n      }\n    }\n    loadTables();\n  }, []);\n\n  // Add a step to workflow (validating order)\n  const addStep = async stepName => {\n    const res = await validateStep(workflowSteps, stepName);\n    if (res.valid) {\n      setWorkflowSteps(prev => [...prev, stepName]);\n      setMessages(prev => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\n\n      // Fetch corresponding code snippet\n      const code = await fetchCodeForStep(stepName);\n      setCodeSnippet(code);\n    } else {\n      setMessages(prev => [...prev, `❌ ${res.message}`]);\n    }\n  };\n\n  // Fetch and display table HTML on dropdown selection\n  const selectTable = async tableName => {\n    try {\n      const html = await fetchTableHTML(tableName);\n      setSelectedTableHTML(html);\n      setMessages(prev => [...prev, `📊 Showing table: ${tableName}`]);\n    } catch (err) {\n      setMessages(prev => [...prev, `❌ Error loading table: ${tableName}`]);\n    }\n  };\n\n  // Clear Workflow, Code, and Messages\n  const resetWorkflow = () => {\n    setWorkflowSteps([]);\n    setCodeSnippet(\"\");\n    setMessages([\"🔄 Workflow reset.\"]);\n  };\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      workflowSteps,\n      codeSnippet,\n      messages,\n      normalizedTables,\n      selectedTableHTML,\n      addStep,\n      selectTable,\n      resetWorkflow\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(StateContextProvider, \"qnVXj8QM6W5tHyAPjVPFATD+wc4=\");\n_c = StateContextProvider;\nexport const useStateContext = () => {\n  _s2();\n  return useContext(StateContext);\n};\n_s2(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateContextProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","fetchNormalizedTables","fetchCodeForStep","fetchTableHTML","validateStep","jsxDEV","_jsxDEV","StateContext","StateContextProvider","children","_s","workflowSteps","setWorkflowSteps","codeSnippet","setCodeSnippet","messages","setMessages","normalizedTables","setNormalizedTables","selectedTableHTML","setSelectedTableHTML","loadTables","tables","err","console","error","addStep","stepName","res","valid","prev","code","message","selectTable","tableName","html","resetWorkflow","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\r\nimport {\r\n  fetchNormalizedTables,\r\n  fetchCodeForStep,\r\n  fetchTableHTML,\r\n  validateStep,\r\n} from \"../api\";\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateContextProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);  // For OutputPanel shapes\r\n  const [codeSnippet, setCodeSnippet] = useState(\"\");      // For CodePanel\r\n  const [messages, setMessages] = useState([]);            // For MessagePanel\r\n  const [normalizedTables, setNormalizedTables] = useState([]); // Dropdown Tables\r\n  const [selectedTableHTML, setSelectedTableHTML] = useState(\"\"); // Table Content\r\n\r\n  // Fetch tables on mount (MessagePanel dropdown)\r\n  useEffect(() => {\r\n    async function loadTables() {\r\n      try {\r\n        const tables = await fetchNormalizedTables();\r\n        setNormalizedTables(tables);\r\n      } catch (err) {\r\n        console.error(\"Error fetching tables:\", err);\r\n      }\r\n    }\r\n    loadTables();\r\n  }, []);\r\n\r\n  // Add a step to workflow (validating order)\r\n  const addStep = async (stepName) => {\r\n    const res = await validateStep(workflowSteps, stepName);\r\n    if (res.valid) {\r\n      setWorkflowSteps((prev) => [...prev, stepName]);\r\n      setMessages((prev) => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\r\n\r\n      // Fetch corresponding code snippet\r\n      const code = await fetchCodeForStep(stepName);\r\n      setCodeSnippet(code);\r\n    } else {\r\n      setMessages((prev) => [...prev, `❌ ${res.message}`]);\r\n    }\r\n  };\r\n\r\n  // Fetch and display table HTML on dropdown selection\r\n  const selectTable = async (tableName) => {\r\n    try {\r\n      const html = await fetchTableHTML(tableName);\r\n      setSelectedTableHTML(html);\r\n      setMessages((prev) => [...prev, `📊 Showing table: ${tableName}`]);\r\n    } catch (err) {\r\n      setMessages((prev) => [...prev, `❌ Error loading table: ${tableName}`]);\r\n    }\r\n  };\r\n\r\n  // Clear Workflow, Code, and Messages\r\n  const resetWorkflow = () => {\r\n    setWorkflowSteps([]);\r\n    setCodeSnippet(\"\");\r\n    setMessages([\"🔄 Workflow reset.\"]);\r\n  };\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        workflowSteps,\r\n        codeSnippet,\r\n        messages,\r\n        normalizedTables,\r\n        selectedTableHTML,\r\n        addStep,\r\n        selectTable,\r\n        resetWorkflow,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}