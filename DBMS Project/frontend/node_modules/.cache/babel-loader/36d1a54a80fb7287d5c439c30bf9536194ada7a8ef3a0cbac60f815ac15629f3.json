{"ast":null,"code":"/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\nexport class DefaultCommentProvider {\n  constructor(services) {\n    this.grammarConfig = () => services.parser.GrammarConfig;\n  }\n  getComment(node) {\n    var _a;\n    if (isAstNodeWithComment(node)) {\n      return node.$comment;\n    }\n    return (_a = findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)) === null || _a === void 0 ? void 0 : _a.text;\n  }\n}","map":{"version":3,"names":["isAstNodeWithComment","findCommentNode","DefaultCommentProvider","constructor","services","grammarConfig","parser","GrammarConfig","getComment","node","$comment","_a","$cstNode","multilineCommentRules","text"],"sources":["D:\\DBMS\\DBMS Project\\frontend\\node_modules\\langium\\src\\documentation\\comment-provider.ts"],"sourcesContent":["/******************************************************************************\r\n * Copyright 2023 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { GrammarConfig } from '../languages/grammar-config.js';\r\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\r\nimport type { LangiumCoreServices } from '../services.js';\r\nimport type { AstNode } from '../syntax-tree.js';\r\nimport { findCommentNode } from '../utils/cst-utils.js';\r\n\r\n/**\r\n * Provides comments for AST nodes.\r\n */\r\nexport interface CommentProvider {\r\n    /**\r\n     * Returns the comment associated with the specified AST node.\r\n     * @param node The AST node to get the comment for.\r\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\r\n     */\r\n    getComment(node: AstNode): string | undefined;\r\n}\r\n\r\nexport class DefaultCommentProvider implements CommentProvider {\r\n    protected readonly grammarConfig: () => GrammarConfig;\r\n    constructor(services: LangiumCoreServices) {\r\n        this.grammarConfig = () => services.parser.GrammarConfig;\r\n    }\r\n    getComment(node: AstNode): string | undefined {\r\n        if(isAstNodeWithComment(node)) {\r\n            return node.$comment;\r\n        }\r\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\r\n    }\r\n}\r\n"],"mappings":"AAAA;;;;;AAOA,SAASA,oBAAoB,QAAQ,kCAAkC;AAGvE,SAASC,eAAe,QAAQ,uBAAuB;AAcvD,OAAM,MAAOC,sBAAsB;EAE/BC,YAAYC,QAA6B;IACrC,IAAI,CAACC,aAAa,GAAG,MAAMD,QAAQ,CAACE,MAAM,CAACC,aAAa;EAC5D;EACAC,UAAUA,CAACC,IAAa;;IACpB,IAAGT,oBAAoB,CAACS,IAAI,CAAC,EAAE;MAC3B,OAAOA,IAAI,CAACC,QAAQ;IACxB;IACA,OAAO,CAAAC,EAAA,GAAAV,eAAe,CAACQ,IAAI,CAACG,QAAQ,EAAE,IAAI,CAACP,aAAa,EAAE,CAACQ,qBAAqB,CAAC,cAAAF,EAAA,uBAAAA,EAAA,CAAEG,IAAI;EAC3F","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}