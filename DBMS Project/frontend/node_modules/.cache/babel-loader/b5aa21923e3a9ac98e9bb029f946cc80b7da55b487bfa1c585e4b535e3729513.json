{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\nimport { fetchNormalizedTables, fetchCodeForStep, fetchTableHTML, validateStep, uploadFile } from '../api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateProvider = ({\n  children\n}) => {\n  _s();\n  const [workflowSteps, setWorkflowSteps] = useState([]);\n  const [codeSnippet, setCodeSnippet] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [normalizedTables, setNormalizedTables] = useState([]);\n  const [selectedTableHTML, setSelectedTableHTML] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const addStep = useCallback(async (stepName, file = null) => {\n    setIsLoading(true);\n    try {\n      const res = await validateStep(workflowSteps, stepName);\n      if (res.valid) {\n        setWorkflowSteps(prev => [...prev, stepName]);\n        setMessages(prev => [...prev, `✅ Step \"${stepName}\" added`]);\n        if (stepName === 'UploadFile' && file) {\n          await uploadFile(file);\n          setMessages(prev => [...prev, '📁 File uploaded successfully']);\n        }\n      } else {\n        setMessages(prev => [...prev, `❌ ${res.message}`]);\n      }\n    } catch (error) {\n      setMessages(prev => [...prev, `⚠️ Error: ${error.message}`]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, [workflowSteps]);\n  const loadNormalizedTables = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const tables = await fetchNormalizedTables();\n      setNormalizedTables(tables);\n    } catch (error) {\n      setMessages(prev => [...prev, `❌ Error loading tables`]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const fetchCode = useCallback(async stepName => {\n    setIsLoading(true);\n    try {\n      const code = await fetchCodeForStep(stepName);\n      setCodeSnippet(code);\n    } catch (error) {\n      setMessages(prev => [...prev, `❌ Error loading code`]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const selectTable = useCallback(async tableName => {\n    setIsLoading(true);\n    try {\n      const html = await fetchTableHTML(tableName);\n      setSelectedTableHTML(html);\n    } catch (error) {\n      setMessages(prev => [...prev, `❌ Error loading table`]);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const resetWorkflow = useCallback(() => {\n    setWorkflowSteps([]);\n    setCodeSnippet('');\n    setMessages(['🔄 Workflow reset']);\n    setNormalizedTables([]);\n    setSelectedTableHTML('');\n  }, []);\n  const value = useMemo(() => ({\n    workflowSteps,\n    codeSnippet,\n    messages,\n    normalizedTables,\n    selectedTableHTML,\n    isLoading,\n    addStep,\n    fetchCode,\n    loadNormalizedTables,\n    selectTable,\n    resetWorkflow\n  }), [workflowSteps, codeSnippet, messages, normalizedTables, selectedTableHTML, isLoading, addStep, fetchCode, loadNormalizedTables, selectTable, resetWorkflow]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 5\n  }, this);\n};\n_s(StateProvider, \"lAcJ4KBEuhS1lvA1JEtgFE0kTMo=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s2();\n  const context = useContext(StateContext);\n  if (!context) {\n    throw new Error('useStateContext must be used within a StateProvider');\n  }\n  return context;\n};\n_s2(useStateContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","useMemo","fetchNormalizedTables","fetchCodeForStep","fetchTableHTML","validateStep","uploadFile","jsxDEV","_jsxDEV","StateContext","StateProvider","children","_s","workflowSteps","setWorkflowSteps","codeSnippet","setCodeSnippet","messages","setMessages","normalizedTables","setNormalizedTables","selectedTableHTML","setSelectedTableHTML","isLoading","setIsLoading","addStep","stepName","file","res","valid","prev","message","error","loadNormalizedTables","tables","fetchCode","code","selectTable","tableName","html","resetWorkflow","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","context","Error","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback, useMemo } from 'react';\r\nimport { \r\n  fetchNormalizedTables, \r\n  fetchCodeForStep, \r\n  fetchTableHTML, \r\n  validateStep, \r\n  uploadFile \r\n} from '../api/api';\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);\r\n  const [codeSnippet, setCodeSnippet] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n  const [selectedTableHTML, setSelectedTableHTML] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const addStep = useCallback(async (stepName, file = null) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await validateStep(workflowSteps, stepName);\r\n      if (res.valid) {\r\n        setWorkflowSteps(prev => [...prev, stepName]);\r\n        setMessages(prev => [...prev, `✅ Step \"${stepName}\" added`]);\r\n        \r\n        if (stepName === 'UploadFile' && file) {\r\n          await uploadFile(file);\r\n          setMessages(prev => [...prev, '📁 File uploaded successfully']);\r\n        }\r\n      } else {\r\n        setMessages(prev => [...prev, `❌ ${res.message}`]);\r\n      }\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, `⚠️ Error: ${error.message}`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, [workflowSteps]);\r\n\r\n  const loadNormalizedTables = useCallback(async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      const tables = await fetchNormalizedTables();\r\n      setNormalizedTables(tables);\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, `❌ Error loading tables`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const fetchCode = useCallback(async (stepName) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const code = await fetchCodeForStep(stepName);\r\n      setCodeSnippet(code);\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, `❌ Error loading code`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const selectTable = useCallback(async (tableName) => {\r\n    setIsLoading(true);\r\n    try {\r\n      const html = await fetchTableHTML(tableName);\r\n      setSelectedTableHTML(html);\r\n    } catch (error) {\r\n      setMessages(prev => [...prev, `❌ Error loading table`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  const resetWorkflow = useCallback(() => {\r\n    setWorkflowSteps([]);\r\n    setCodeSnippet('');\r\n    setMessages(['🔄 Workflow reset']);\r\n    setNormalizedTables([]);\r\n    setSelectedTableHTML('');\r\n  }, []);\r\n\r\n  const value = useMemo(() => ({\r\n    workflowSteps,\r\n    codeSnippet,\r\n    messages,\r\n    normalizedTables,\r\n    selectedTableHTML,\r\n    isLoading,\r\n    addStep,\r\n    fetchCode,\r\n    loadNormalizedTables,\r\n    selectTable,\r\n    resetWorkflow\r\n  }), [\r\n    workflowSteps,\r\n    codeSnippet,\r\n    messages,\r\n    normalizedTables,\r\n    selectedTableHTML,\r\n    isLoading,\r\n    addStep,\r\n    fetchCode,\r\n    loadNormalizedTables,\r\n    selectTable,\r\n    resetWorkflow\r\n  ]);\r\n\r\n  return (\r\n    <StateContext.Provider value={value}>\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => {\r\n  const context = useContext(StateContext);\r\n  if (!context) {\r\n    throw new Error('useStateContext must be used within a StateProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}