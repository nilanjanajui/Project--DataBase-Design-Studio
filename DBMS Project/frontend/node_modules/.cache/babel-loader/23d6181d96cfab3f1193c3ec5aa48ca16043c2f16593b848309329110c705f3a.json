{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\components\\\\ERDiagramPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mermaid from \"mermaid\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ERDiagramPage = ({\n  mermaidCode\n}) => {\n  _s();\n  const containerRef = useRef(null);\n  const [positions, setPositions] = useState({});\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    if (!mermaidCode || !containerRef.current) return;\n    const applyPositions = () => {\n      const svgContainer = containerRef.current;\n      if (!svgContainer) return;\n      const nodes = svgContainer.querySelectorAll(\"g.node\");\n      nodes.forEach(node => {\n        var _node$querySelector;\n        // Use node id or fallback to title text inside the node for identification\n        const id = node.id || node.getAttribute(\"data-id\") || ((_node$querySelector = node.querySelector(\"title\")) === null || _node$querySelector === void 0 ? void 0 : _node$querySelector.textContent);\n        if (!id) return;\n        const pos = positions[id];\n        if (pos) {\n          node.setAttribute(\"transform\", `translate(${pos.x},${pos.y})`);\n        }\n      });\n    };\n    const enableDrag = () => {\n      const svgContainer = containerRef.current;\n      if (!svgContainer) return;\n      const nodes = svgContainer.querySelectorAll(\"g.node\");\n      nodes.forEach(node => {\n        let offset = {\n          x: 0,\n          y: 0\n        };\n        let isDragging = false;\n        const onMouseDown = event => {\n          event.preventDefault();\n          isDragging = true;\n          // Calculate mouse offset from node top-left corner\n          const transform = node.getAttribute(\"transform\");\n          const match = transform === null || transform === void 0 ? void 0 : transform.match(/translate\\(([-\\d.]+),\\s*([-\\d.]+)\\)/);\n          const currentX = match ? parseFloat(match[1]) : 0;\n          const currentY = match ? parseFloat(match[2]) : 0;\n          offset = {\n            x: event.clientX - currentX,\n            y: event.clientY - currentY\n          };\n          document.addEventListener(\"mousemove\", onMouseMove);\n          document.addEventListener(\"mouseup\", onMouseUp);\n        };\n        const onMouseMove = event => {\n          var _node$querySelector2;\n          if (!isDragging) return;\n          const x = event.clientX - offset.x;\n          const y = event.clientY - offset.y;\n          node.setAttribute(\"transform\", `translate(${x},${y})`);\n\n          // Update position in state\n          const id = node.id || node.getAttribute(\"data-id\") || ((_node$querySelector2 = node.querySelector(\"title\")) === null || _node$querySelector2 === void 0 ? void 0 : _node$querySelector2.textContent);\n          if (id) {\n            setPositions(prev => ({\n              ...prev,\n              [id]: {\n                x,\n                y\n              }\n            }));\n          }\n        };\n        const onMouseUp = () => {\n          isDragging = false;\n          document.removeEventListener(\"mousemove\", onMouseMove);\n          document.removeEventListener(\"mouseup\", onMouseUp);\n        };\n        node.style.cursor = \"move\";\n        node.addEventListener(\"mousedown\", onMouseDown);\n\n        // Cleanup listeners on unmount or re-render\n        return () => {\n          node.removeEventListener(\"mousedown\", onMouseDown);\n        };\n      });\n    };\n    mermaid.initialize({\n      startOnLoad: false\n    });\n    containerRef.current.innerHTML = \"\";\n    mermaid.render(\"mermaidDiagram\", mermaidCode).then(({\n      svg\n    }) => {\n      if (!containerRef.current) return;\n      containerRef.current.innerHTML = svg;\n      applyPositions();\n      enableDrag();\n    }).catch(e => setError(\"Mermaid render error: \" + e.message));\n  }, [mermaidCode, positions]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"ER Diagram\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(ERDiagramPage, \"zWs5LqvJ8OCF18hfjCL0ymDbk64=\");\n_c = ERDiagramPage;\nexport default ERDiagramPage;\nvar _c;\n$RefreshReg$(_c, \"ERDiagramPage\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mermaid","jsxDEV","_jsxDEV","ERDiagramPage","mermaidCode","_s","containerRef","positions","setPositions","error","setError","current","applyPositions","svgContainer","nodes","querySelectorAll","forEach","node","_node$querySelector","id","getAttribute","querySelector","textContent","pos","setAttribute","x","y","enableDrag","offset","isDragging","onMouseDown","event","preventDefault","transform","match","currentX","parseFloat","currentY","clientX","clientY","document","addEventListener","onMouseMove","onMouseUp","_node$querySelector2","prev","removeEventListener","style","cursor","initialize","startOnLoad","innerHTML","render","then","svg","catch","e","message","children","fileName","_jsxFileName","lineNumber","columnNumber","color","ref","_c","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/components/ERDiagramPage.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport mermaid from \"mermaid\";\r\n\r\nconst ERDiagramPage = ({ mermaidCode }) => {\r\n  const containerRef = useRef(null);\r\n  const [positions, setPositions] = useState({});\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!mermaidCode || !containerRef.current) return;\r\n\r\n    const applyPositions = () => {\r\n      const svgContainer = containerRef.current;\r\n      if (!svgContainer) return;\r\n\r\n      const nodes = svgContainer.querySelectorAll(\"g.node\");\r\n      nodes.forEach((node) => {\r\n        // Use node id or fallback to title text inside the node for identification\r\n        const id = node.id || node.getAttribute(\"data-id\") || node.querySelector(\"title\")?.textContent;\r\n        if (!id) return;\r\n\r\n        const pos = positions[id];\r\n        if (pos) {\r\n          node.setAttribute(\"transform\", `translate(${pos.x},${pos.y})`);\r\n        }\r\n      });\r\n    };\r\n\r\n    const enableDrag = () => {\r\n      const svgContainer = containerRef.current;\r\n      if (!svgContainer) return;\r\n\r\n      const nodes = svgContainer.querySelectorAll(\"g.node\");\r\n      nodes.forEach((node) => {\r\n        let offset = { x: 0, y: 0 };\r\n        let isDragging = false;\r\n\r\n        const onMouseDown = (event) => {\r\n          event.preventDefault();\r\n          isDragging = true;\r\n          // Calculate mouse offset from node top-left corner\r\n          const transform = node.getAttribute(\"transform\");\r\n          const match = transform?.match(/translate\\(([-\\d.]+),\\s*([-\\d.]+)\\)/);\r\n          const currentX = match ? parseFloat(match[1]) : 0;\r\n          const currentY = match ? parseFloat(match[2]) : 0;\r\n          offset = {\r\n            x: event.clientX - currentX,\r\n            y: event.clientY - currentY,\r\n          };\r\n          document.addEventListener(\"mousemove\", onMouseMove);\r\n          document.addEventListener(\"mouseup\", onMouseUp);\r\n        };\r\n\r\n        const onMouseMove = (event) => {\r\n          if (!isDragging) return;\r\n          const x = event.clientX - offset.x;\r\n          const y = event.clientY - offset.y;\r\n          node.setAttribute(\"transform\", `translate(${x},${y})`);\r\n\r\n          // Update position in state\r\n          const id = node.id || node.getAttribute(\"data-id\") || node.querySelector(\"title\")?.textContent;\r\n          if (id) {\r\n            setPositions((prev) => ({ ...prev, [id]: { x, y } }));\r\n          }\r\n        };\r\n\r\n        const onMouseUp = () => {\r\n          isDragging = false;\r\n          document.removeEventListener(\"mousemove\", onMouseMove);\r\n          document.removeEventListener(\"mouseup\", onMouseUp);\r\n        };\r\n\r\n        node.style.cursor = \"move\";\r\n        node.addEventListener(\"mousedown\", onMouseDown);\r\n\r\n        // Cleanup listeners on unmount or re-render\r\n        return () => {\r\n          node.removeEventListener(\"mousedown\", onMouseDown);\r\n        };\r\n      });\r\n    };\r\n\r\n    mermaid.initialize({ startOnLoad: false });\r\n\r\n    containerRef.current.innerHTML = \"\";\r\n\r\n    mermaid\r\n      .render(\"mermaidDiagram\", mermaidCode)\r\n      .then(({ svg }) => {\r\n        if (!containerRef.current) return;\r\n        containerRef.current.innerHTML = svg;\r\n\r\n        applyPositions();\r\n        enableDrag();\r\n      })\r\n      .catch((e) => setError(\"Mermaid render error: \" + e.message));\r\n  }, [mermaidCode, positions]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>ER Diagram</h2>\r\n      {error && <div style={{ color: \"red\" }}>{error}</div>}\r\n      <div ref={containerRef} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ERDiagramPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}