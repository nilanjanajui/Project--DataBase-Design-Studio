{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateProvider = ({\n  children\n}) => {\n  _s();\n  const [workflowSteps, setWorkflowSteps] = useState([]);\n  const [currentCode, setCurrentCodeState] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [normalizedTables, setNormalizedTables] = useState([]);\n  const [selectedTable, setSelectedTable] = useState('');\n  const [selectedTableData, setSelectedTableData] = useState(null);\n\n  // --- Add these two states for Dependency Preservation data ---\n  const [originalFDs, setOriginalFDs] = useState([]); // Functional Dependencies list\n  const [decomposedSchemas, setDecomposedSchemas] = useState([]); // Schemas list\n\n  // Add Workflow Step - prevents duplicates\n  const addWorkflowStep = useCallback(stepName => {\n    setWorkflowSteps(prev => {\n      if (!prev.includes(stepName)) {\n        return [...prev, stepName];\n      }\n      return prev;\n    });\n  }, []);\n\n  // Fetch Code snippet for workflow step\n  const fetchCode = useCallback(async stepName => {\n    try {\n      const response = await axios.get(`/api/code/${stepName}`);\n      return response.data.code;\n    } catch (error) {\n      console.error('Failed to fetch code:', error);\n      return 'Error fetching code.';\n    }\n  }, []);\n\n  // Set current code displayed in CodePanel\n  const setCurrentCode = useCallback(code => {\n    setCurrentCodeState(code);\n  }, []);\n\n  // Add message to message log\n  const addMessage = useCallback(msg => {\n    setMessages(prev => [...prev, msg]);\n  }, []);\n\n  // Fetch list of normalized tables from backend\n  const fetchNormalizedTables = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/normalized_tables');\n      setNormalizedTables(response.data.tables || []);\n    } catch (error) {\n      console.error('Failed to fetch normalized tables:', error);\n    }\n  }, []);\n\n  // Fetch data for a selected table for display\n  const fetchSelectedTableData = useCallback(async tableName => {\n    try {\n      const response = await axios.get(`/api/table_data/${tableName}`);\n      setSelectedTable(tableName);\n      setSelectedTableData(response.data.data || []); // default empty array if no data\n    } catch (error) {\n      console.error('Failed to fetch table data:', error);\n      setSelectedTableData(null);\n    }\n  }, []);\n\n  // Fetch detected Functional Dependencies from backend\n  const fetchOriginalFDs = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/detected_fds');\n      // Expect response.data.fds to be an array, else default to []\n      setOriginalFDs(Array.isArray(response.data.fds) ? response.data.fds : []);\n    } catch (error) {\n      console.error('Failed to fetch Functional Dependencies:', error);\n      setOriginalFDs([]);\n    }\n  }, []);\n\n  // Fetch decomposed schemas from backend\n  const fetchDecomposedSchemas = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/decomposed_schemas');\n      // Expect response.data.schemas to be an array, else default to []\n      setDecomposedSchemas(Array.isArray(response.data.schemas) ? response.data.schemas : []);\n    } catch (error) {\n      console.error('Failed to fetch Decomposed Schemas:', error);\n      setDecomposedSchemas([]);\n    }\n  }, []);\n\n  // Check dependency preservation by sending originalFDs and decomposedSchemas to backend\n  const checkDependencyPreservation = useCallback(async (fds, schemas) => {\n    // Defensive: Validate inputs before API call\n    if (!Array.isArray(fds) || fds.length === 0) {\n      const msg = 'Error: Functional Dependencies are missing or invalid.';\n      addMessage(msg);\n      throw new Error(msg);\n    }\n    if (!Array.isArray(schemas) || schemas.length === 0) {\n      const msg = 'Error: Decomposed Schemas are missing or invalid.';\n      addMessage(msg);\n      throw new Error(msg);\n    }\n    try {\n      const response = await axios.post('/api/dependency_preservation', {\n        originalFDs: fds,\n        decomposedSchemas: schemas\n      }, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      const message = response.data.message || 'Dependency preservation checked.';\n      addMessage(message);\n      addWorkflowStep('DependencyPreservation');\n      return message;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Dependency preservation check failed:', error);\n      const errorMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to check dependency preservation.';\n      addMessage(errorMsg);\n      throw new Error(errorMsg);\n    }\n  }, [addMessage, addWorkflowStep]);\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      workflowSteps,\n      addWorkflowStep,\n      fetchCode,\n      currentCode,\n      setCurrentCode,\n      messages,\n      addMessage,\n      normalizedTables,\n      fetchNormalizedTables,\n      selectedTable,\n      setSelectedTable,\n      selectedTableData,\n      fetchSelectedTableData,\n      originalFDs,\n      fetchOriginalFDs,\n      decomposedSchemas,\n      fetchDecomposedSchemas,\n      checkDependencyPreservation\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(StateProvider, \"taArUxLS5ktwW0GtksCpMqCBSPk=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s2();\n  return useContext(StateContext);\n};\n_s2(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useCallback","axios","jsxDEV","_jsxDEV","StateContext","StateProvider","children","_s","workflowSteps","setWorkflowSteps","currentCode","setCurrentCodeState","messages","setMessages","normalizedTables","setNormalizedTables","selectedTable","setSelectedTable","selectedTableData","setSelectedTableData","originalFDs","setOriginalFDs","decomposedSchemas","setDecomposedSchemas","addWorkflowStep","stepName","prev","includes","fetchCode","response","get","data","code","error","console","setCurrentCode","addMessage","msg","fetchNormalizedTables","tables","fetchSelectedTableData","tableName","fetchOriginalFDs","Array","isArray","fds","fetchDecomposedSchemas","schemas","checkDependencyPreservation","length","Error","post","headers","message","_error$response","_error$response$data","errorMsg","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);\r\n  const [currentCode, setCurrentCodeState] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n  const [selectedTable, setSelectedTable] = useState(''); \r\n  const [selectedTableData, setSelectedTableData] = useState(null);\r\n\r\n  // --- Add these two states for Dependency Preservation data ---\r\n  const [originalFDs, setOriginalFDs] = useState([]);         // Functional Dependencies list\r\n  const [decomposedSchemas, setDecomposedSchemas] = useState([]); // Schemas list\r\n\r\n  // Add Workflow Step - prevents duplicates\r\n  const addWorkflowStep = useCallback((stepName) => {\r\n    setWorkflowSteps((prev) => {\r\n      if (!prev.includes(stepName)) {\r\n        return [...prev, stepName];\r\n      }\r\n      return prev;\r\n    });\r\n  }, []);\r\n\r\n  // Fetch Code snippet for workflow step\r\n  const fetchCode = useCallback(async (stepName) => {\r\n    try {\r\n      const response = await axios.get(`/api/code/${stepName}`);\r\n      return response.data.code;\r\n    } catch (error) {\r\n      console.error('Failed to fetch code:', error);\r\n      return 'Error fetching code.';\r\n    }\r\n  }, []);\r\n\r\n  // Set current code displayed in CodePanel\r\n  const setCurrentCode = useCallback((code) => {\r\n    setCurrentCodeState(code);\r\n  }, []);\r\n\r\n  // Add message to message log\r\n  const addMessage = useCallback((msg) => {\r\n    setMessages((prev) => [...prev, msg]);\r\n  }, []);\r\n\r\n  // Fetch list of normalized tables from backend\r\n  const fetchNormalizedTables = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/normalized_tables');\r\n      setNormalizedTables(response.data.tables || []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch normalized tables:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch data for a selected table for display\r\n  const fetchSelectedTableData = useCallback(async (tableName) => {\r\n    try {\r\n      const response = await axios.get(`/api/table_data/${tableName}`);\r\n      setSelectedTable(tableName);\r\n      setSelectedTableData(response.data.data || []); // default empty array if no data\r\n    } catch (error) {\r\n      console.error('Failed to fetch table data:', error);\r\n      setSelectedTableData(null);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch detected Functional Dependencies from backend\r\n  const fetchOriginalFDs = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/detected_fds');\r\n      // Expect response.data.fds to be an array, else default to []\r\n      setOriginalFDs(Array.isArray(response.data.fds) ? response.data.fds : []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch Functional Dependencies:', error);\r\n      setOriginalFDs([]);\r\n    }\r\n  }, []);\r\n\r\n  // Fetch decomposed schemas from backend\r\n  const fetchDecomposedSchemas = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/decomposed_schemas');\r\n      // Expect response.data.schemas to be an array, else default to []\r\n      setDecomposedSchemas(Array.isArray(response.data.schemas) ? response.data.schemas : []);\r\n    } catch (error) {\r\n      console.error('Failed to fetch Decomposed Schemas:', error);\r\n      setDecomposedSchemas([]);\r\n    }\r\n  }, []);\r\n\r\n  // Check dependency preservation by sending originalFDs and decomposedSchemas to backend\r\n  const checkDependencyPreservation = useCallback(\r\n    async (fds, schemas) => {\r\n      // Defensive: Validate inputs before API call\r\n      if (!Array.isArray(fds) || fds.length === 0) {\r\n        const msg = 'Error: Functional Dependencies are missing or invalid.';\r\n        addMessage(msg);\r\n        throw new Error(msg);\r\n      }\r\n      if (!Array.isArray(schemas) || schemas.length === 0) {\r\n        const msg = 'Error: Decomposed Schemas are missing or invalid.';\r\n        addMessage(msg);\r\n        throw new Error(msg);\r\n      }\r\n\r\n      try {\r\n        const response = await axios.post(\r\n          '/api/dependency_preservation',\r\n          { originalFDs: fds, decomposedSchemas: schemas },\r\n          { headers: { 'Content-Type': 'application/json' } }\r\n        );\r\n        const message = response.data.message || 'Dependency preservation checked.';\r\n        addMessage(message);\r\n        addWorkflowStep('DependencyPreservation');\r\n        return message;\r\n      } catch (error) {\r\n        console.error('Dependency preservation check failed:', error);\r\n        const errorMsg = error.response?.data?.message || 'Failed to check dependency preservation.';\r\n        addMessage(errorMsg);\r\n        throw new Error(errorMsg);\r\n      }\r\n    },\r\n    [addMessage, addWorkflowStep]\r\n  );\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        workflowSteps,\r\n        addWorkflowStep,\r\n        fetchCode,\r\n        currentCode,\r\n        setCurrentCode,\r\n        messages,\r\n        addMessage,\r\n        normalizedTables,\r\n        fetchNormalizedTables,\r\n        selectedTable,\r\n        setSelectedTable,\r\n        selectedTableData,\r\n        fetchSelectedTableData,\r\n        originalFDs,\r\n        fetchOriginalFDs,\r\n        decomposedSchemas,\r\n        fetchDecomposedSchemas,\r\n        checkDependencyPreservation,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}