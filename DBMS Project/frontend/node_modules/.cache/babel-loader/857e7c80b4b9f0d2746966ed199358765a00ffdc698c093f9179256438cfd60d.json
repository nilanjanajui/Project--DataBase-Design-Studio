{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\components\\\\OutputPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport Draggable from 'react-draggable';\nimport { useStateContext } from '../context/StateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OutputPanel = () => {\n  _s();\n  const {\n    workflowSteps,\n    fetchCode,\n    setCurrentCode\n  } = useStateContext();\n  const [positions, setPositions] = useState({});\n  const containerRef = useRef(null);\n\n  // Initialize default positions when new workflow steps are added\n  useEffect(() => {\n    setPositions(prev => {\n      const newPositions = {\n        ...prev\n      };\n      workflowSteps.forEach((step, index) => {\n        if (!newPositions[step]) {\n          // Position new buttons vertically spaced\n          newPositions[step] = {\n            x: 20,\n            y: 40 + index * 80\n          };\n        }\n      });\n      return newPositions;\n    });\n  }, [workflowSteps]);\n\n  // Handle dragging to update positions\n  const handleDrag = (e, data, step) => {\n    setPositions(prev => ({\n      ...prev,\n      [step]: {\n        x: data.x,\n        y: data.y\n      }\n    }));\n  };\n\n  // When a button is clicked, fetch code and send to CodePanel\n  const handleButtonClick = async step => {\n    const code = await fetchCode(step);\n    setCurrentCode(code);\n  };\n\n  // Calculate SVG lines connecting buttons in sequence\n  // Connect center right of button i to center left of button i+1\n  const renderConnections = () => {\n    const lines = [];\n    for (let i = 0; i < workflowSteps.length - 1; i++) {\n      const from = workflowSteps[i];\n      const to = workflowSteps[i + 1];\n      const fromPos = positions[from];\n      const toPos = positions[to];\n      if (!fromPos || !toPos) continue;\n\n      // Calculate coordinates\n      const startX = fromPos.x + 120; // Button width assumed 120\n      const startY = fromPos.y + 20; // Button height assumed 40, middle is 20\n      const endX = toPos.x;\n      const endY = toPos.y + 20;\n      lines.push(/*#__PURE__*/_jsxDEV(\"line\", {\n        x1: startX,\n        y1: startY,\n        x2: endX,\n        y2: endY,\n        stroke: \"black\",\n        strokeWidth: \"2\",\n        markerEnd: \"url(#arrowhead)\"\n      }, `${from}-${to}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this));\n    }\n    return lines;\n  };\n\n  // Get container width and height for SVG\n  const svgWidth = containerRef.current ? containerRef.current.clientWidth : 800;\n  const svgHeight = containerRef.current ? containerRef.current.clientHeight : 600;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    className: \"output-panel\",\n    style: {\n      position: 'relative',\n      width: '100%',\n      height: '100%',\n      border: '1px solid #ccc',\n      background: '#fefefe',\n      overflow: 'hidden'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        pointerEvents: 'none'\n      },\n      width: svgWidth,\n      height: svgHeight,\n      children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrowhead\",\n          markerWidth: \"10\",\n          markerHeight: \"7\",\n          refX: \"10\",\n          refY: \"3.5\",\n          orient: \"auto\",\n          fill: \"black\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"0 0, 10 3.5, 0 7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), renderConnections()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), workflowSteps.map(step => {\n      const pos = positions[step] || {\n        x: 20,\n        y: 20\n      };\n      return /*#__PURE__*/_jsxDEV(Draggable, {\n        position: pos,\n        onDrag: (e, data) => handleDrag(e, data, step),\n        bounds: \"parent\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            position: 'absolute',\n            width: 120,\n            height: 40,\n            cursor: 'move',\n            userSelect: 'none',\n            borderRadius: 6,\n            boxShadow: '0 1px 4px rgba(0,0,0,0.2)',\n            background: '#4caf50',\n            color: 'white',\n            fontWeight: 'bold'\n          },\n          onClick: () => handleButtonClick(step),\n          children: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 13\n        }, this)\n      }, step, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPanel, \"ZvBEZywh2uNJw06Il2zHQR62HsU=\", false, function () {\n  return [useStateContext];\n});\n_c = OutputPanel;\nexport default OutputPanel;\nvar _c;\n$RefreshReg$(_c, \"OutputPanel\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Draggable","useStateContext","jsxDEV","_jsxDEV","OutputPanel","_s","workflowSteps","fetchCode","setCurrentCode","positions","setPositions","containerRef","prev","newPositions","forEach","step","index","x","y","handleDrag","e","data","handleButtonClick","code","renderConnections","lines","i","length","from","to","fromPos","toPos","startX","startY","endX","endY","push","x1","y1","x2","y2","stroke","strokeWidth","markerEnd","fileName","_jsxFileName","lineNumber","columnNumber","svgWidth","current","clientWidth","svgHeight","clientHeight","ref","className","style","position","width","height","border","background","overflow","children","top","left","pointerEvents","id","markerWidth","markerHeight","refX","refY","orient","fill","points","map","pos","onDrag","bounds","cursor","userSelect","borderRadius","boxShadow","color","fontWeight","onClick","_c","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/components/OutputPanel.jsx"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport Draggable from 'react-draggable';\r\nimport { useStateContext } from '../context/StateContext';\r\n\r\nconst OutputPanel = () => {\r\n  const { workflowSteps, fetchCode, setCurrentCode } = useStateContext();\r\n  const [positions, setPositions] = useState({});\r\n  const containerRef = useRef(null);\r\n\r\n  // Initialize default positions when new workflow steps are added\r\n  useEffect(() => {\r\n    setPositions((prev) => {\r\n      const newPositions = { ...prev };\r\n      workflowSteps.forEach((step, index) => {\r\n        if (!newPositions[step]) {\r\n          // Position new buttons vertically spaced\r\n          newPositions[step] = { x: 20, y: 40 + index * 80 };\r\n        }\r\n      });\r\n      return newPositions;\r\n    });\r\n  }, [workflowSteps]);\r\n\r\n  // Handle dragging to update positions\r\n  const handleDrag = (e, data, step) => {\r\n    setPositions((prev) => ({\r\n      ...prev,\r\n      [step]: { x: data.x, y: data.y },\r\n    }));\r\n  };\r\n\r\n  // When a button is clicked, fetch code and send to CodePanel\r\n  const handleButtonClick = async (step) => {\r\n    const code = await fetchCode(step);\r\n    setCurrentCode(code);\r\n  };\r\n\r\n  // Calculate SVG lines connecting buttons in sequence\r\n  // Connect center right of button i to center left of button i+1\r\n  const renderConnections = () => {\r\n    const lines = [];\r\n    for (let i = 0; i < workflowSteps.length - 1; i++) {\r\n      const from = workflowSteps[i];\r\n      const to = workflowSteps[i + 1];\r\n      const fromPos = positions[from];\r\n      const toPos = positions[to];\r\n      if (!fromPos || !toPos) continue;\r\n\r\n      // Calculate coordinates\r\n      const startX = fromPos.x + 120; // Button width assumed 120\r\n      const startY = fromPos.y + 20;  // Button height assumed 40, middle is 20\r\n      const endX = toPos.x;\r\n      const endY = toPos.y + 20;\r\n\r\n      lines.push(\r\n        <line\r\n          key={`${from}-${to}`}\r\n          x1={startX}\r\n          y1={startY}\r\n          x2={endX}\r\n          y2={endY}\r\n          stroke=\"black\"\r\n          strokeWidth=\"2\"\r\n          markerEnd=\"url(#arrowhead)\"\r\n        />\r\n      );\r\n    }\r\n    return lines;\r\n  };\r\n\r\n  // Get container width and height for SVG\r\n  const svgWidth = containerRef.current ? containerRef.current.clientWidth : 800;\r\n  const svgHeight = containerRef.current ? containerRef.current.clientHeight : 600;\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className=\"output-panel\"\r\n      style={{\r\n        position: 'relative',\r\n        width: '100%',\r\n        height: '100%',\r\n        border: '1px solid #ccc',\r\n        background: '#fefefe',\r\n        overflow: 'hidden',\r\n      }}\r\n    >\r\n      {/* SVG for connections */}\r\n      <svg\r\n        style={{ position: 'absolute', top: 0, left: 0, pointerEvents: 'none' }}\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n      >\r\n        <defs>\r\n          <marker\r\n            id=\"arrowhead\"\r\n            markerWidth=\"10\"\r\n            markerHeight=\"7\"\r\n            refX=\"10\"\r\n            refY=\"3.5\"\r\n            orient=\"auto\"\r\n            fill=\"black\"\r\n          >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" />\r\n          </marker>\r\n        </defs>\r\n        {renderConnections()}\r\n      </svg>\r\n\r\n      {/* Draggable buttons */}\r\n      {workflowSteps.map((step) => {\r\n        const pos = positions[step] || { x: 20, y: 20 };\r\n        return (\r\n          <Draggable\r\n            key={step}\r\n            position={pos}\r\n            onDrag={(e, data) => handleDrag(e, data, step)}\r\n            bounds=\"parent\"\r\n          >\r\n            <button\r\n              style={{\r\n                position: 'absolute',\r\n                width: 120,\r\n                height: 40,\r\n                cursor: 'move',\r\n                userSelect: 'none',\r\n                borderRadius: 6,\r\n                boxShadow: '0 1px 4px rgba(0,0,0,0.2)',\r\n                background: '#4caf50',\r\n                color: 'white',\r\n                fontWeight: 'bold',\r\n              }}\r\n              onClick={() => handleButtonClick(step)}\r\n            >\r\n              {step}\r\n            </button>\r\n          </Draggable>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}