{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\components\\\\ActionPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport { uploadFile, triggerBackendStep, checkDependencyPreservation } from '../api';\nimport { useStateContext } from '../context/StateContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ActionPanel = () => {\n  _s();\n  const {\n    addMessage,\n    addWorkflowStep,\n    fetchNormalizedTables\n  } = useStateContext();\n  const fileInputRef = useRef(null);\n\n  // Handle file upload using uploadFile API\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    try {\n      const message = await uploadFile(file);\n      addMessage(message);\n      addWorkflowStep('Upload');\n    } catch (error) {\n      addMessage(error.message);\n    }\n  };\n\n  // Generic handler for backend steps using triggerBackendStep API\n  const handleBackendAction = async stepName => {\n    try {\n      const message = await triggerBackendStep(stepName);\n      addMessage(message);\n      addWorkflowStep(stepName);\n\n      // After Normalizing Tables, refresh the tables list\n      if (stepName === 'NormalizeTable') {\n        await fetchNormalizedTables(); // <-- This triggers fetching tables from backend\n      }\n    } catch (error) {\n      addMessage(error.message);\n    }\n  };\n  const handleDependencyPreservation = async () => {\n    try {\n      // Dummy Payload (Replace with actual FD and schema data later)\n      const dummyFDs = [[new Set(['A']), new Set(['B'])], [new Set(['B']), new Set(['C'])]];\n      const dummySchemas = [new Set(['A', 'B']), new Set(['B', 'C'])];\n\n      // Convert Sets to Arrays for JSON serialization\n      const originalFDs = dummyFDs.map(([lhs, rhs]) => ({\n        lhs: Array.from(lhs),\n        rhs: Array.from(rhs)\n      }));\n      const decomposedSchemas = dummySchemas.map(schema => Array.from(schema));\n      const message = await checkDependencyPreservation(originalFDs, decomposedSchemas);\n      addMessage(message);\n      addWorkflowStep('DependencyPreservation');\n    } catch (error) {\n      addMessage(error.message);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"action-panel\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Action Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        ref: fileInputRef,\n        onChange: handleFileUpload,\n        style: {\n          display: 'none'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => fileInputRef.current.click(),\n        children: \"Upload File\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"actions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('ConvertToCSV'),\n        children: \"Convert to CSV\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('CleanModify'),\n        children: \"Clean & Modify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('FDModified'),\n        children: \"Detect Functional Dependencies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('NormalizeTable'),\n        children: \"Normalize Tables\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('KeyDetection'),\n        children: \"Detect Keys\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleDependencyPreservation,\n        children: \"Check Dependency Preservation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('LosslessCheck'),\n        children: \"Check Lossless Decomposition\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleBackendAction('ERDiagram'),\n        children: \"Generate ER Diagram\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(ActionPanel, \"dtVKbgrNRBcWA3DpQi80Nu85XHo=\", false, function () {\n  return [useStateContext];\n});\n_c = ActionPanel;\nexport default ActionPanel;\nvar _c;\n$RefreshReg$(_c, \"ActionPanel\");","map":{"version":3,"names":["React","useRef","uploadFile","triggerBackendStep","checkDependencyPreservation","useStateContext","jsxDEV","_jsxDEV","ActionPanel","_s","addMessage","addWorkflowStep","fetchNormalizedTables","fileInputRef","handleFileUpload","event","file","target","files","message","error","handleBackendAction","stepName","handleDependencyPreservation","dummyFDs","Set","dummySchemas","originalFDs","map","lhs","rhs","Array","from","decomposedSchemas","schema","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","ref","onChange","style","display","onClick","current","click","_c","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/components/ActionPanel.jsx"],"sourcesContent":["import React, { useRef } from 'react';\r\nimport { uploadFile, triggerBackendStep, checkDependencyPreservation } from '../api';\r\nimport { useStateContext } from '../context/StateContext';\r\n\r\nconst ActionPanel = () => {\r\n  const { addMessage, addWorkflowStep, fetchNormalizedTables } = useStateContext();\r\n  const fileInputRef = useRef(null);\r\n\r\n  // Handle file upload using uploadFile API\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    try {\r\n      const message = await uploadFile(file);\r\n      addMessage(message);\r\n      addWorkflowStep('Upload');\r\n    } catch (error) {\r\n      addMessage(error.message);\r\n    }\r\n  };\r\n\r\n  // Generic handler for backend steps using triggerBackendStep API\r\n  const handleBackendAction = async (stepName) => {\r\n    try {\r\n      const message = await triggerBackendStep(stepName);\r\n      addMessage(message);\r\n      addWorkflowStep(stepName);\r\n\r\n    // After Normalizing Tables, refresh the tables list\r\n      if (stepName === 'NormalizeTable') {\r\n        await fetchNormalizedTables();  // <-- This triggers fetching tables from backend\r\n      }\r\n\r\n    } catch (error) {\r\n      addMessage(error.message);\r\n    }\r\n  };\r\n\r\n\r\n\r\n    const handleDependencyPreservation = async () => {\r\n    try {\r\n      // Dummy Payload (Replace with actual FD and schema data later)\r\n      const dummyFDs = [\r\n        [new Set(['A']), new Set(['B'])],\r\n        [new Set(['B']), new Set(['C'])]\r\n      ];\r\n      const dummySchemas = [\r\n        new Set(['A', 'B']),\r\n        new Set(['B', 'C'])\r\n      ];\r\n\r\n      // Convert Sets to Arrays for JSON serialization\r\n      const originalFDs = dummyFDs.map(([lhs, rhs]) => ({\r\n        lhs: Array.from(lhs),\r\n        rhs: Array.from(rhs),\r\n      }));\r\n\r\n      const decomposedSchemas = dummySchemas.map(schema => Array.from(schema));\r\n\r\n      const message = await checkDependencyPreservation(originalFDs, decomposedSchemas);\r\n      addMessage(message);\r\n      addWorkflowStep('DependencyPreservation');\r\n    } catch (error) {\r\n      addMessage(error.message);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"action-panel\">\r\n      <h2>Action Panel</h2>\r\n\r\n      {/* File Upload Section */}\r\n      <div>\r\n        <input\r\n          type=\"file\"\r\n          ref={fileInputRef}\r\n          onChange={handleFileUpload}\r\n          style={{ display: 'none' }}\r\n        />\r\n        <button onClick={() => fileInputRef.current.click()}>Upload File</button>\r\n      </div>\r\n\r\n      {/* Action Buttons */}\r\n      <div className=\"actions\">\r\n        <button onClick={() => handleBackendAction('ConvertToCSV')}>\r\n          Convert to CSV\r\n        </button>\r\n        <button onClick={() => handleBackendAction('CleanModify')}>\r\n          Clean & Modify\r\n        </button>\r\n        <button onClick={() => handleBackendAction('FDModified')}>\r\n          Detect Functional Dependencies\r\n        </button>\r\n        <button onClick={() => handleBackendAction('NormalizeTable')}>\r\n          Normalize Tables\r\n        </button>\r\n        <button onClick={() => handleBackendAction('KeyDetection')}>\r\n          Detect Keys\r\n        </button>\r\n        <button onClick={handleDependencyPreservation}>\r\n          Check Dependency Preservation\r\n        </button>\r\n        <button onClick={() => handleBackendAction('LosslessCheck')}>\r\n          Check Lossless Decomposition\r\n        </button>\r\n        <button onClick={() => handleBackendAction('ERDiagram')}>\r\n          Generate ER Diagram\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ActionPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}