{"ast":null,"code":"import axios from 'axios';\n\n// Set base URL for backend API (adjust if needed)\naxios.defaults.baseURL = 'http://localhost:5000'; // Change if deploying to a server\n\n// ---------------------- File Upload ---------------------- //\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.message;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'File upload failed');\n  }\n};\n\n// ---------------------- Backend Actions ---------------------- //\nexport const triggerBackendStep = async stepName => {\n  try {\n    const response = await axios.post(`/api/${stepName.toLowerCase()}`);\n    return response.data; // ⚠️ IMPORTANT: Return full response (message, fds, schemas, etc.)\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Step failed');\n  }\n};\n\n// ---------------------- Fetch Backend Code ---------------------- //\nexport const fetchCodeForStep = async stepName => {\n  try {\n    const response = await axios.get(`/api/code/${stepName}`);\n    return response.data.code;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch code');\n  }\n};\n\n// ---------------------- Fetch Normalized Tables ---------------------- //\n\nexport const fetchNormalizedTables = async () => {\n  try {\n    const response = await axios.get('/api/normalized_tables');\n    return response.data.tables || []; // Ensure it always returns an array\n  } catch (error) {\n    console.error('Error fetching normalized tables:', error);\n    return [];\n  }\n};\n\n// ---------------------- Fetch Table Data ---------------------- //\nexport const fetchTableData = async tableName => {\n  try {\n    const response = await axios.get(`/api/table/${tableName}`);\n    return response.data.rows || [];\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch table data');\n  }\n};\n\n// Dependency Preservation API Call\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\n  try {\n    const payload = {\n      originalFDs: originalFDs,\n      decomposedSchemas: decomposedSchemas\n    };\n    const response = await axios.post('/api/dependency_preservation', payload, {\n      headers: {\n        'Content-Type': 'application/json' // Ensure JSON payload\n      }\n    });\n    return response.data.message;\n  } catch (error) {\n    var _error$response5, _error$response6, _error$response6$data;\n    console.error('Dependency preservation check failed:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : _error$response5.data) || error.message);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to check dependency preservation');\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","uploadFile","file","formData","FormData","append","response","post","headers","data","message","error","_error$response","_error$response$data","Error","triggerBackendStep","stepName","toLowerCase","_error$response2","_error$response2$data","fetchCodeForStep","get","code","_error$response3","_error$response3$data","fetchNormalizedTables","tables","console","fetchTableData","tableName","rows","_error$response4","_error$response4$data","checkDependencyPreservation","originalFDs","decomposedSchemas","payload","_error$response5","_error$response6","_error$response6$data"],"sources":["D:/DBMS/DBMS Project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base URL for backend API (adjust if needed)\r\naxios.defaults.baseURL = 'http://localhost:5000';  // Change if deploying to a server\r\n\r\n// ---------------------- File Upload ---------------------- //\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  try {\r\n    const response = await axios.post('/api/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data.message;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'File upload failed');\r\n  }\r\n};\r\n\r\n// ---------------------- Backend Actions ---------------------- //\r\nexport const triggerBackendStep = async (stepName) => {\r\n  try {\r\n    const response = await axios.post(`/api/${stepName.toLowerCase()}`);\r\n    return response.data;  // ⚠️ IMPORTANT: Return full response (message, fds, schemas, etc.)\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Step failed');\r\n  }\r\n};\r\n\r\n\r\n// ---------------------- Fetch Backend Code ---------------------- //\r\nexport const fetchCodeForStep = async (stepName) => {\r\n  try {\r\n    const response = await axios.get(`/api/code/${stepName}`);\r\n    return response.data.code;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch code');\r\n  }\r\n};\r\n\r\n// ---------------------- Fetch Normalized Tables ---------------------- //\r\n\r\nexport const fetchNormalizedTables = async () => {\r\n  try {\r\n    const response = await axios.get('/api/normalized_tables');\r\n    return response.data.tables || [];  // Ensure it always returns an array\r\n  } catch (error) {\r\n    console.error('Error fetching normalized tables:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n// ---------------------- Fetch Table Data ---------------------- //\r\nexport const fetchTableData = async (tableName) => {\r\n  try {\r\n    const response = await axios.get(`/api/table/${tableName}`);\r\n    return response.data.rows || [];\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch table data');\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// Dependency Preservation API Call\r\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\r\n  try {\r\n    const payload = {\r\n      originalFDs: originalFDs,\r\n      decomposedSchemas: decomposedSchemas\r\n    };\r\n\r\n    const response = await axios.post('/api/dependency_preservation', payload, {\r\n      headers: {\r\n        'Content-Type': 'application/json',  // Ensure JSON payload\r\n      },\r\n    });\r\n\r\n    return response.data.message;\r\n  } catch (error) {\r\n    console.error('Dependency preservation check failed:', error.response?.data || error.message);\r\n    throw new Error(error.response?.data?.message || 'Failed to check dependency preservation');\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}