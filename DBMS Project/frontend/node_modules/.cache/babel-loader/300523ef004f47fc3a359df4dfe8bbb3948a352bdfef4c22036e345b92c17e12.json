{"ast":null,"code":"import axios from 'axios';\n\n// Set base URL for backend API (adjust if needed)\naxios.defaults.baseURL = 'http://localhost:5000'; // Change if deploying to a server\n\n// ---------------------- File Upload ---------------------- //\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.message;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'File upload failed');\n  }\n};\n\n// ---------------------- Backend Actions ---------------------- //\nexport const triggerBackendStep = async stepName => {\n  const endpointMap = {\n    ConvertToCSV: '/api/convert_to_csv',\n    CleanModify: '/api/clean_modify',\n    FDModified: '/api/fd_modified',\n    KeyDetection: '/api/key_detection',\n    NormalizeTable: '/api/normalize_table',\n    DependencyPreservation: '/api/dependency_preservation',\n    LosslessCheck: '/api/lossless_check',\n    ERDiagram: '/api/generate_er_diagram'\n  };\n  const endpoint = endpointMap[stepName];\n  if (!endpoint) {\n    throw new Error('Invalid step name');\n  }\n  try {\n    const response = await axios.post(endpoint);\n    if (stepName === 'LosslessCheck') {\n      // Custom handling for LosslessCheck:\n      if (response.data && typeof response.data.message === 'string') {\n        return response.data.message;\n      }\n      if (response.data) {\n        return JSON.stringify(response.data);\n      }\n      return 'Unexpected response from lossless check API';\n    }\n\n    // Default handling for other steps\n    if (response.data && typeof response.data.message === 'string') {\n      return response.data.message;\n    }\n    throw new Error(`Invalid response from server on ${stepName}`);\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || `Failed to trigger ${stepName}`);\n  }\n};\n\n// ---------------------- Fetch Backend Code ---------------------- //\nexport const fetchCodeForStep = async stepName => {\n  try {\n    const response = await axios.get(`/api/code/${stepName}`);\n    return response.data.code;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch code');\n  }\n};\n\n// ---------------------- Fetch Normalized Tables ---------------------- //\n\nexport const fetchNormalizedTables = async () => {\n  try {\n    const response = await axios.get('/api/normalized_tables');\n    return response.data.tables || []; // Ensure it always returns an array\n  } catch (error) {\n    console.error('Error fetching normalized tables:', error);\n    return [];\n  }\n};\n\n// ---------------------- Fetch Table Data ---------------------- //\nexport const fetchTableData = async tableName => {\n  try {\n    const response = await axios.get(`/api/table/${tableName}`);\n    return response.data.rows || [];\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch table data');\n  }\n};\n\n// Dependency Preservation API Call\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\n  try {\n    const response = await axios.post('/api/dependency_preservation', {\n      originalFDs,\n      decomposedSchemas\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data.message; // ✅ Correctly return message\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    const errorMsg = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Dependency preservation check failed';\n    console.error('Dependency preservation check failed:', errorMsg);\n    throw new Error(errorMsg); // ✅ Throw a string error, not object\n  }\n};\n\n// Add this specific API call for Lossless Check\nexport const triggerLosslessCheck = async () => {\n  try {\n    const response = await axios.post('/api/lossless_check');\n    // Check if response.data.message exists and is string\n    if (response.data && typeof response.data.message === 'string') {\n      return response.data.message;\n    }\n    // If message field missing or invalid, stringify whole response.data\n    if (response.data) {\n      return JSON.stringify(response.data);\n    }\n    // Fallback generic error\n    return 'Unexpected response from lossless check API';\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    // Grab backend message or error message string\n    const msg = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message || 'Lossless check failed';\n    console.error('Lossless check API error:', msg);\n    throw new Error(msg);\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","uploadFile","file","formData","FormData","append","response","post","headers","data","message","error","_error$response","_error$response$data","Error","triggerBackendStep","stepName","endpointMap","ConvertToCSV","CleanModify","FDModified","KeyDetection","NormalizeTable","DependencyPreservation","LosslessCheck","ERDiagram","endpoint","JSON","stringify","_error$response2","_error$response2$data","fetchCodeForStep","get","code","_error$response3","_error$response3$data","fetchNormalizedTables","tables","console","fetchTableData","tableName","rows","_error$response4","_error$response4$data","checkDependencyPreservation","originalFDs","decomposedSchemas","_error$response5","_error$response5$data","errorMsg","triggerLosslessCheck","_error$response6","_error$response6$data","msg"],"sources":["D:/DBMS/DBMS Project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base URL for backend API (adjust if needed)\r\naxios.defaults.baseURL = 'http://localhost:5000';  // Change if deploying to a server\r\n\r\n// ---------------------- File Upload ---------------------- //\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  try {\r\n    const response = await axios.post('/api/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data.message;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'File upload failed');\r\n  }\r\n};\r\n\r\n// ---------------------- Backend Actions ---------------------- //\r\nexport const triggerBackendStep = async (stepName) => {\r\n  const endpointMap = {\r\n    ConvertToCSV: '/api/convert_to_csv',\r\n    CleanModify: '/api/clean_modify',\r\n    FDModified: '/api/fd_modified',\r\n    KeyDetection: '/api/key_detection',\r\n    NormalizeTable: '/api/normalize_table',\r\n    DependencyPreservation: '/api/dependency_preservation',\r\n    LosslessCheck: '/api/lossless_check',\r\n    ERDiagram: '/api/generate_er_diagram',\r\n  };\r\n\r\n  const endpoint = endpointMap[stepName];\r\n  if (!endpoint) {\r\n    throw new Error('Invalid step name');\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(endpoint);\r\n\r\n    if (stepName === 'LosslessCheck') {\r\n      // Custom handling for LosslessCheck:\r\n      if (response.data && typeof response.data.message === 'string') {\r\n        return response.data.message;\r\n      }\r\n      if (response.data) {\r\n        return JSON.stringify(response.data);\r\n      }\r\n      return 'Unexpected response from lossless check API';\r\n    }\r\n\r\n    // Default handling for other steps\r\n    if (response.data && typeof response.data.message === 'string') {\r\n      return response.data.message;\r\n    }\r\n    throw new Error(`Invalid response from server on ${stepName}`);\r\n\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || `Failed to trigger ${stepName}`);\r\n  }\r\n};\r\n\r\n\r\n// ---------------------- Fetch Backend Code ---------------------- //\r\nexport const fetchCodeForStep = async (stepName) => {\r\n  try {\r\n    const response = await axios.get(`/api/code/${stepName}`);\r\n    return response.data.code;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch code');\r\n  }\r\n};\r\n\r\n// ---------------------- Fetch Normalized Tables ---------------------- //\r\n\r\nexport const fetchNormalizedTables = async () => {\r\n  try {\r\n    const response = await axios.get('/api/normalized_tables');\r\n    return response.data.tables || [];  // Ensure it always returns an array\r\n  } catch (error) {\r\n    console.error('Error fetching normalized tables:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n// ---------------------- Fetch Table Data ---------------------- //\r\nexport const fetchTableData = async (tableName) => {\r\n  try {\r\n    const response = await axios.get(`/api/table/${tableName}`);\r\n    return response.data.rows || [];\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch table data');\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\n// Dependency Preservation API Call\r\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\r\n  try {\r\n    const response = await axios.post(\r\n      '/api/dependency_preservation',\r\n      { originalFDs, decomposedSchemas },\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n    return response.data.message;  // ✅ Correctly return message\r\n  } catch (error) {\r\n    const errorMsg = error.response?.data?.message || 'Dependency preservation check failed';\r\n    console.error('Dependency preservation check failed:', errorMsg);\r\n    throw new Error(errorMsg);  // ✅ Throw a string error, not object\r\n  }\r\n};\r\n\r\n\r\n\r\n// Add this specific API call for Lossless Check\r\nexport const triggerLosslessCheck = async () => {\r\n  try {\r\n    const response = await axios.post('/api/lossless_check');\r\n    // Check if response.data.message exists and is string\r\n    if (response.data && typeof response.data.message === 'string') {\r\n      return response.data.message;\r\n    }\r\n    // If message field missing or invalid, stringify whole response.data\r\n    if (response.data) {\r\n      return JSON.stringify(response.data);\r\n    }\r\n    // Fallback generic error\r\n    return 'Unexpected response from lossless check API';\r\n  } catch (error) {\r\n    // Grab backend message or error message string\r\n    const msg = error.response?.data?.message || error.message || 'Lossless check failed';\r\n    console.error('Lossless check API error:', msg);\r\n    throw new Error(msg);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}