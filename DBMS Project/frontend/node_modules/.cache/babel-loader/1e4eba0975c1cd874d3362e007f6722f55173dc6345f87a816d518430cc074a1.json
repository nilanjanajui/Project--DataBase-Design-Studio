{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport { fetchNormalizedTables, fetchCodeForStep, fetchTableHTML, validateStep, uploadFile } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateProvider = ({\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [workflowSteps, setWorkflowSteps] = useState([]);\n  const [codeSnippet, setCodeSnippet] = useState(\"\");\n  const [messages, setMessages] = useState([]);\n  const [normalizedTables, setNormalizedTables] = useState([]);\n  const [selectedTableHTML, setSelectedTableHTML] = useState(\"\");\n  const addStep = async (stepName, file = null) => {\n    const res = await validateStep(workflowSteps, stepName);\n    if (res.valid) {\n      setWorkflowSteps(prev => [...prev, stepName]);\n      setMessages(prev => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\n      if (stepName === \"UploadFile\" && file) {\n        await uploadFile(file);\n        setMessages(prev => [...prev, \"📁 File uploaded successfully.\"]);\n      }\n    } else {\n      setMessages(prev => [...prev, `❌ ${res.message}`]);\n    }\n  };\n  const StateProvider = ({\n    children\n  }) => {\n    _s();\n    const [workflowSteps, setWorkflowSteps] = useState([]);\n    const [codeSnippet, setCodeSnippet] = useState(\"\");\n    const [messages, setMessages] = useState([]);\n    const [normalizedTables, setNormalizedTables] = useState([]);\n    const [selectedTableHTML, setSelectedTableHTML] = useState(\"\");\n    const addStep = async (stepName, file = null) => {\n      const res = await validateStep(workflowSteps, stepName);\n      if (res.valid) {\n        setWorkflowSteps(prev => [...prev, stepName]);\n        setMessages(prev => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\n        if (stepName === \"UploadFile\" && file) {\n          await uploadFile(file);\n          setMessages(prev => [...prev, \"📁 File uploaded successfully.\"]);\n        }\n      } else {\n        setMessages(prev => [...prev, `❌ ${res.message}`]);\n      }\n    };\n\n    // ... rest of the context provider code ...\n  };\n  _s(StateProvider, \"ZuTgp+c0sUCBCgjW6pxZf/eI0zQ=\");\n  const selectTable = async tableName => {\n    const html = await fetchTableHTML(tableName);\n    setSelectedTableHTML(html);\n  };\n  const loadNormalizedTables = async () => {\n    const tables = await fetchNormalizedTables();\n    setNormalizedTables(tables);\n  };\n  const fetchCode = async stepName => {\n    const code = await fetchCodeForStep(stepName);\n    setCodeSnippet(code);\n  };\n  const resetWorkflow = () => {\n    setWorkflowSteps([]);\n    setCodeSnippet(\"\");\n    setMessages([\"🔄 Workflow reset.\"]);\n    setSelectedTableHTML(\"\");\n    setNormalizedTables([]);\n  };\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      workflowSteps,\n      codeSnippet,\n      messages,\n      normalizedTables,\n      selectedTableHTML,\n      addStep,\n      fetchCode,\n      loadNormalizedTables,\n      selectTable,\n      resetWorkflow\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s2(StateProvider, \"ZuTgp+c0sUCBCgjW6pxZf/eI0zQ=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s3();\n  return useContext(StateContext);\n};\n_s3(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","fetchNormalizedTables","fetchCodeForStep","fetchTableHTML","validateStep","uploadFile","jsxDEV","_jsxDEV","StateContext","StateProvider","children","_s2","_s","$RefreshSig$","workflowSteps","setWorkflowSteps","codeSnippet","setCodeSnippet","messages","setMessages","normalizedTables","setNormalizedTables","selectedTableHTML","setSelectedTableHTML","addStep","stepName","file","res","valid","prev","message","selectTable","tableName","html","loadNormalizedTables","tables","fetchCode","code","resetWorkflow","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s3","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport {\r\n  fetchNormalizedTables,\r\n  fetchCodeForStep,\r\n  fetchTableHTML,\r\n  validateStep,\r\n  uploadFile,\r\n} from \"../api/api\";\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);\r\n  const [codeSnippet, setCodeSnippet] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n  const [selectedTableHTML, setSelectedTableHTML] = useState(\"\");\r\n\r\n  const addStep = async (stepName, file = null) => {\r\n    const res = await validateStep(workflowSteps, stepName);\r\n    if (res.valid) {\r\n      setWorkflowSteps((prev) => [...prev, stepName]);\r\n      setMessages((prev) => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\r\n      if (stepName === \"UploadFile\" && file) {\r\n        await uploadFile(file);\r\n        setMessages((prev) => [...prev, \"📁 File uploaded successfully.\"]);\r\n      }\r\n    } else {\r\n      setMessages((prev) => [...prev, `❌ ${res.message}`]);\r\n    }\r\n  };\r\n\r\n  const StateProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);\r\n  const [codeSnippet, setCodeSnippet] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n  const [selectedTableHTML, setSelectedTableHTML] = useState(\"\");\r\n\r\n  const addStep = async (stepName, file = null) => {\r\n    const res = await validateStep(workflowSteps, stepName);\r\n    if (res.valid) {\r\n      setWorkflowSteps((prev) => [...prev, stepName]);\r\n      setMessages((prev) => [...prev, `✅ Step \"${stepName}\" added to workflow.`]);\r\n      if (stepName === \"UploadFile\" && file) {\r\n        await uploadFile(file);\r\n        setMessages((prev) => [...prev, \"📁 File uploaded successfully.\"]);\r\n      }\r\n    } else {\r\n      setMessages((prev) => [...prev, `❌ ${res.message}`]);\r\n    }\r\n  };\r\n\r\n  // ... rest of the context provider code ...\r\n};\r\n\r\n  const selectTable = async (tableName) => {\r\n    const html = await fetchTableHTML(tableName);\r\n    setSelectedTableHTML(html);\r\n  };\r\n\r\n  const loadNormalizedTables = async () => {\r\n    const tables = await fetchNormalizedTables();\r\n    setNormalizedTables(tables);\r\n  };\r\n\r\n  const fetchCode = async (stepName) => {\r\n    const code = await fetchCodeForStep(stepName);\r\n    setCodeSnippet(code);\r\n  };\r\n\r\n  const resetWorkflow = () => {\r\n    setWorkflowSteps([]);\r\n    setCodeSnippet(\"\");\r\n    setMessages([\"🔄 Workflow reset.\"]);\r\n    setSelectedTableHTML(\"\");\r\n    setNormalizedTables([]);\r\n  };\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        workflowSteps,\r\n        codeSnippet,\r\n        messages,\r\n        normalizedTables,\r\n        selectedTableHTML,\r\n        addStep,\r\n        fetchCode,\r\n        loadNormalizedTables,\r\n        selectTable,\r\n        resetWorkflow,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}