{"ast":null,"code":"import { AbstractMermaidTokenBuilder, AbstractMermaidValueConverter, MermaidGeneratedSharedModule, TreemapGeneratedModule, __name } from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/treemap/module.ts\nimport { EmptyFileSystem, createDefaultCoreModule, createDefaultSharedCoreModule, inject } from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 &&\n      // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */__name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */__name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */__name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(createDefaultSharedCoreModule(context), MermaidGeneratedSharedModule);\n  const Treemap = inject(createDefaultCoreModule({\n    shared\n  }), TreemapGeneratedModule, TreemapModule);\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return {\n    shared,\n    Treemap\n  };\n}\n__name(createTreemapServices, \"createTreemapServices\");\nexport { TreemapModule, createTreemapServices };","map":{"version":3,"names":["AbstractMermaidTokenBuilder","AbstractMermaidValueConverter","MermaidGeneratedSharedModule","TreemapGeneratedModule","__name","EmptyFileSystem","createDefaultCoreModule","createDefaultSharedCoreModule","inject","TreemapTokenBuilder","constructor","classDefRegex","TreemapValueConverter","runCustomConverter","rule","input","_cstNode","name","parseFloat","replace","substring","length","match","exec","$type","className","styleText","registerValidationChecks","services","validator","validation","TreemapValidator","registry","ValidationRegistry","checks","Treemap","checkSingleRoot","bind","register","doc","accept","rootNodeIndentation","row","TreemapRows","item","indent","node","property","parseInt","TreemapModule","parser","TokenBuilder","ValueConverter","createTreemapServices","context","shared","ServiceRegistry"],"sources":["D:/DBMS/DBMS Project/frontend/node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-XRWGC2XP.mjs"],"sourcesContent":["import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  TreemapGeneratedModule,\n  __name\n} from \"./chunk-4KMFLZZN.mjs\";\n\n// src/language/treemap/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/treemap/tokenBuilder.ts\nvar TreemapTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"TreemapTokenBuilder\");\n  }\n  constructor() {\n    super([\"treemap\"]);\n  }\n};\n\n// src/language/treemap/valueConverter.ts\nvar classDefRegex = /classDef\\s+([A-Z_a-z]\\w+)(?:\\s+([^\\n\\r;]*))?;?/;\nvar TreemapValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"TreemapValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"NUMBER2\") {\n      return parseFloat(input.replace(/,/g, \"\"));\n    } else if (rule.name === \"SEPARATOR\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"STRING2\") {\n      return input.substring(1, input.length - 1);\n    } else if (rule.name === \"INDENTATION\") {\n      return input.length;\n    } else if (rule.name === \"ClassDef\") {\n      if (typeof input !== \"string\") {\n        return input;\n      }\n      const match = classDefRegex.exec(input);\n      if (match) {\n        return {\n          $type: \"ClassDefStatement\",\n          className: match[1],\n          styleText: match[2] || void 0\n        };\n      }\n    }\n    return void 0;\n  }\n};\n\n// src/language/treemap/treemap-validator.ts\nfunction registerValidationChecks(services) {\n  const validator = services.validation.TreemapValidator;\n  const registry = services.validation.ValidationRegistry;\n  if (registry) {\n    const checks = {\n      Treemap: validator.checkSingleRoot.bind(validator)\n      // Remove unused validation for TreemapRow\n    };\n    registry.register(checks, validator);\n  }\n}\n__name(registerValidationChecks, \"registerValidationChecks\");\nvar TreemapValidator = class {\n  static {\n    __name(this, \"TreemapValidator\");\n  }\n  /**\n   * Validates that a treemap has only one root node.\n   * A root node is defined as a node that has no indentation.\n   */\n  checkSingleRoot(doc, accept) {\n    let rootNodeIndentation;\n    for (const row of doc.TreemapRows) {\n      if (!row.item) {\n        continue;\n      }\n      if (rootNodeIndentation === void 0 && // Check if this is a root node (no indentation)\n      row.indent === void 0) {\n        rootNodeIndentation = 0;\n      } else if (row.indent === void 0) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      } else if (rootNodeIndentation !== void 0 && rootNodeIndentation >= parseInt(row.indent, 10)) {\n        accept(\"error\", \"Multiple root nodes are not allowed in a treemap.\", {\n          node: row,\n          property: \"item\"\n        });\n      }\n    }\n  }\n};\n\n// src/language/treemap/module.ts\nvar TreemapModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new TreemapTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new TreemapValueConverter(), \"ValueConverter\")\n  },\n  validation: {\n    TreemapValidator: /* @__PURE__ */ __name(() => new TreemapValidator(), \"TreemapValidator\")\n  }\n};\nfunction createTreemapServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Treemap = inject(\n    createDefaultCoreModule({ shared }),\n    TreemapGeneratedModule,\n    TreemapModule\n  );\n  shared.ServiceRegistry.register(Treemap);\n  registerValidationChecks(Treemap);\n  return { shared, Treemap };\n}\n__name(createTreemapServices, \"createTreemapServices\");\n\nexport {\n  TreemapModule,\n  createTreemapServices\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}