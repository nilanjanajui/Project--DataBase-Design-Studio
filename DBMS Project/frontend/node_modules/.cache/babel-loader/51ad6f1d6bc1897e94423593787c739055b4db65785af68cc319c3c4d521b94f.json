{"ast":null,"code":"import axios from 'axios';\n\n// Set base URL for backend API (adjust if needed)\naxios.defaults.baseURL = 'http://localhost:5000'; // Change if deploying to a server\n\n// ---------------------- File Upload ---------------------- //\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    var _response$data;\n    const response = await axios.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n\n    // Always check for expected response structure to avoid parsing errors\n    if (response.status === 200 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.message) {\n      return response.data.message;\n    } else {\n      throw new Error('Unexpected response from upload API');\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n    // Improve error handling: check if error.response exists to avoid undefined\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'File upload failed');\n  }\n};\n\n// ---------------------- Backend Actions ---------------------- //\nexport const triggerBackendStep = async stepName => {\n  const endpointMap = {\n    ConvertToCSV: '/api/convert_to_csv',\n    CleanModify: '/api/clean_modify',\n    FDModified: '/api/fd_modified',\n    KeyDetection: '/api/key_detection',\n    NormalizeTable: '/api/normalize_table',\n    DependencyPreservation: '/api/dependency_preservation',\n    LosslessCheck: '/api/lossless_check',\n    ERDiagram: '/api/generate_er_diagram'\n  };\n  const endpoint = endpointMap[stepName];\n  if (!endpoint) {\n    throw new Error('Invalid step name');\n  }\n  try {\n    const response = await axios.post(endpoint);\n\n    // Check for HTTP 2xx status to avoid parsing error\n    if (response.status < 200 || response.status >= 300) {\n      // Response is not OK, handle as error\n      throw new Error(`Server returned status ${response.status}`);\n    }\n    if (stepName === 'LosslessCheck') {\n      // Custom handling for LosslessCheck:\n      if (response.data && typeof response.data.message === 'string') {\n        return response.data.message;\n      }\n      if (response.data) {\n        return JSON.stringify(response.data);\n      }\n      return 'Unexpected response from lossless check API';\n    }\n\n    // Default handling for other steps\n    if (response.data && typeof response.data.message === 'string') {\n      return response.data.message;\n    }\n    throw new Error(`Invalid response from server on ${stepName}`);\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    // Always check error.response before accessing its data\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || `Failed to trigger ${stepName}`);\n  }\n};\n\n// ---------------------- Fetch Backend Code ---------------------- //\nexport const fetchCodeForStep = async stepName => {\n  try {\n    var _response$data2;\n    const response = await axios.get(`/api/code/${stepName}`);\n\n    // Defensive check for response data\n    if (response.status === 200 && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.code) {\n      return response.data.code;\n    } else {\n      throw new Error('Invalid response when fetching code');\n    }\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch code');\n  }\n};\n\n// Update the fetchNormalizedTables function in api.js\nexport const fetchNormalizedTables = async () => {\n  try {\n    const response = await axios.get('/api/normalized_tables');\n    if (response.status === 200 && Array.isArray(response.data.tables)) {\n      return response.data.tables;\n    }\n    console.warn('Unexpected response shape for normalized tables:', response.data);\n    return [];\n  } catch (error) {\n    console.error('Error fetching normalized tables:', error);\n    return [];\n  }\n};\n\n// Add this new function\nexport const fetchTableData = async tableName => {\n  try {\n    const response = await axios.get(`/api/get_normalized_table/${tableName}`);\n    if (response.status === 200 && response.data) {\n      return response.data;\n    }\n    throw new Error('Invalid response fetching table data');\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to fetch table data');\n  }\n};\n\n// ---------------------- Dependency Preservation API Call ---------------------- //\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\n  try {\n    const response = await axios.post('/api/dependency_preservation', {\n      originalFDs,\n      decomposedSchemas\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    if (response.status === 200 && typeof response.data.message === 'string') {\n      return response.data.message;\n    }\n    throw new Error('Invalid response from dependency preservation API');\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    const errorMsg = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Dependency preservation check failed';\n    console.error('Dependency preservation check failed:', errorMsg);\n    throw new Error(errorMsg);\n  }\n};\n\n// ---------------------- Lossless Check API Call ---------------------- //\nexport const triggerLosslessCheck = async () => {\n  try {\n    const response = await axios.post('/api/lossless_check');\n    if (response.status === 200 && typeof response.data.message === 'string') {\n      return response.data.message;\n    }\n    if (response.data) {\n      return JSON.stringify(response.data);\n    }\n    return 'Unexpected response from lossless check API';\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    const msg = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || error.message || 'Lossless check failed';\n    console.error('Lossless check API error:', msg);\n    throw new Error(msg);\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","uploadFile","file","formData","FormData","append","_response$data","response","post","headers","status","data","message","Error","error","_error$response","_error$response$data","triggerBackendStep","stepName","endpointMap","ConvertToCSV","CleanModify","FDModified","KeyDetection","NormalizeTable","DependencyPreservation","LosslessCheck","ERDiagram","endpoint","JSON","stringify","_error$response2","_error$response2$data","fetchCodeForStep","_response$data2","get","code","_error$response3","_error$response3$data","fetchNormalizedTables","Array","isArray","tables","console","warn","fetchTableData","tableName","_error$response4","_error$response4$data","checkDependencyPreservation","originalFDs","decomposedSchemas","_error$response5","_error$response5$data","errorMsg","triggerLosslessCheck","_error$response6","_error$response6$data","msg"],"sources":["D:/DBMS/DBMS Project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base URL for backend API (adjust if needed)\r\naxios.defaults.baseURL = 'http://localhost:5000';  // Change if deploying to a server\r\n\r\n// ---------------------- File Upload ---------------------- //\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  try {\r\n    const response = await axios.post('/api/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n\r\n    // Always check for expected response structure to avoid parsing errors\r\n    if (response.status === 200 && response.data?.message) {\r\n      return response.data.message;\r\n    } else {\r\n      throw new Error('Unexpected response from upload API');\r\n    }\r\n  } catch (error) {\r\n    // Improve error handling: check if error.response exists to avoid undefined\r\n    throw new Error(error.response?.data?.message || 'File upload failed');\r\n  }\r\n};\r\n\r\n// ---------------------- Backend Actions ---------------------- //\r\nexport const triggerBackendStep = async (stepName) => {\r\n  const endpointMap = {\r\n    ConvertToCSV: '/api/convert_to_csv',\r\n    CleanModify: '/api/clean_modify',\r\n    FDModified: '/api/fd_modified',\r\n    KeyDetection: '/api/key_detection',\r\n    NormalizeTable: '/api/normalize_table',\r\n    DependencyPreservation: '/api/dependency_preservation',\r\n    LosslessCheck: '/api/lossless_check',\r\n    ERDiagram: '/api/generate_er_diagram',\r\n  };\r\n\r\n  const endpoint = endpointMap[stepName];\r\n  if (!endpoint) {\r\n    throw new Error('Invalid step name');\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(endpoint);\r\n\r\n    // Check for HTTP 2xx status to avoid parsing error\r\n    if (response.status < 200 || response.status >= 300) {\r\n      // Response is not OK, handle as error\r\n      throw new Error(`Server returned status ${response.status}`);\r\n    }\r\n\r\n    if (stepName === 'LosslessCheck') {\r\n      // Custom handling for LosslessCheck:\r\n      if (response.data && typeof response.data.message === 'string') {\r\n        return response.data.message;\r\n      }\r\n      if (response.data) {\r\n        return JSON.stringify(response.data);\r\n      }\r\n      return 'Unexpected response from lossless check API';\r\n    }\r\n\r\n    // Default handling for other steps\r\n    if (response.data && typeof response.data.message === 'string') {\r\n      return response.data.message;\r\n    }\r\n\r\n    throw new Error(`Invalid response from server on ${stepName}`);\r\n  } catch (error) {\r\n    // Always check error.response before accessing its data\r\n    throw new Error(error.response?.data?.message || `Failed to trigger ${stepName}`);\r\n  }\r\n};\r\n\r\n// ---------------------- Fetch Backend Code ---------------------- //\r\nexport const fetchCodeForStep = async (stepName) => {\r\n  try {\r\n    const response = await axios.get(`/api/code/${stepName}`);\r\n\r\n    // Defensive check for response data\r\n    if (response.status === 200 && response.data?.code) {\r\n      return response.data.code;\r\n    } else {\r\n      throw new Error('Invalid response when fetching code');\r\n    }\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch code');\r\n  }\r\n};\r\n\r\n// Update the fetchNormalizedTables function in api.js\r\nexport const fetchNormalizedTables = async () => {\r\n  try {\r\n    const response = await axios.get('/api/normalized_tables');\r\n    if (response.status === 200 && Array.isArray(response.data.tables)) {\r\n      return response.data.tables;\r\n    }\r\n    console.warn('Unexpected response shape for normalized tables:', response.data);\r\n    return [];\r\n  } catch (error) {\r\n    console.error('Error fetching normalized tables:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Add this new function\r\nexport const fetchTableData = async (tableName) => {\r\n  try {\r\n    const response = await axios.get(`/api/get_normalized_table/${tableName}`);\r\n    if (response.status === 200 && response.data) {\r\n      return response.data;\r\n    }\r\n    throw new Error('Invalid response fetching table data');\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.error || 'Failed to fetch table data');\r\n  }\r\n};\r\n\r\n// ---------------------- Dependency Preservation API Call ---------------------- //\r\nexport const checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\r\n  try {\r\n    const response = await axios.post(\r\n      '/api/dependency_preservation',\r\n      { originalFDs, decomposedSchemas },\r\n      { headers: { 'Content-Type': 'application/json' } }\r\n    );\r\n\r\n    if (response.status === 200 && typeof response.data.message === 'string') {\r\n      return response.data.message;\r\n    }\r\n    throw new Error('Invalid response from dependency preservation API');\r\n  } catch (error) {\r\n    const errorMsg = error.response?.data?.message || 'Dependency preservation check failed';\r\n    console.error('Dependency preservation check failed:', errorMsg);\r\n    throw new Error(errorMsg);\r\n  }\r\n};\r\n\r\n// ---------------------- Lossless Check API Call ---------------------- //\r\nexport const triggerLosslessCheck = async () => {\r\n  try {\r\n    const response = await axios.post('/api/lossless_check');\r\n\r\n    if (response.status === 200 && typeof response.data.message === 'string') {\r\n      return response.data.message;\r\n    }\r\n\r\n    if (response.data) {\r\n      return JSON.stringify(response.data);\r\n    }\r\n    return 'Unexpected response from lossless check API';\r\n  } catch (error) {\r\n    const msg = error.response?.data?.message || error.message || 'Lossless check failed';\r\n    console.error('Lossless check API error:', msg);\r\n    throw new Error(msg);\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}