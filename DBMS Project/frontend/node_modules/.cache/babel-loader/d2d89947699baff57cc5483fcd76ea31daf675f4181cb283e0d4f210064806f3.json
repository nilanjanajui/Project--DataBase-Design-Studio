{"ast":null,"code":"import axios from 'axios';\n\n// Set base URL for backend API (adjust if needed)\naxios.defaults.baseURL = 'http://localhost:5000'; // Change if deploying to a server\n\n// ---------------------- File Upload ---------------------- //\nexport const uploadFile = async file => {\n  const formData = new FormData();\n  formData.append('file', file);\n  try {\n    const response = await axios.post('/api/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data.message;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'File upload failed');\n  }\n};\n\n// ---------------------- Backend Actions ---------------------- //\nexport const triggerBackendStep = async stepName => {\n  const endpointMap = {\n    ConvertToCSV: '/api/convert_to_csv',\n    CleanModify: '/api/clean_modify',\n    FDModified: '/api/fd_modified',\n    KeyDetection: '/api/key_detection',\n    NormalizeTable: '/api/normalize_table',\n    DependencyPreservation: '/api/dependency_preservation',\n    LosslessCheck: '/api/lossless_check',\n    ERDiagram: '/api/generate_er_diagram'\n  };\n  const endpoint = endpointMap[stepName];\n  if (!endpoint) {\n    throw new Error('Invalid step name');\n  }\n  try {\n    const response = await axios.post(endpoint);\n    return response.data.message;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || `Failed to trigger ${stepName}`);\n  }\n};\n\n// ---------------------- Fetch Backend Code ---------------------- //\nexport const fetchCodeForStep = async stepName => {\n  try {\n    const response = await axios.get(`/api/code/${stepName}`);\n    return response.data.code;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to fetch code');\n  }\n};\n\n// ---------------------- Fetch Normalized Tables ---------------------- //\n\nexport const fetchNormalizedTables = async () => {\n  try {\n    const response = await axios.get('/api/normalized_tables');\n    return response.data.tables || []; // Ensure it always returns an array\n  } catch (error) {\n    console.error('Error fetching normalized tables:', error);\n    return [];\n  }\n};\n\n// ---------------------- Fetch Table Data ---------------------- //\nexport const fetchTableData = async tableName => {\n  try {\n    const response = await axios.get(`/api/table/${tableName}`);\n    return response.data.rows || [];\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to fetch table data');\n  }\n};\nconst checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\n  try {\n    const response = await axios.post('/api/dependency_preservation', {\n      original_fds: originalFDs,\n      decomposed_schemas: decomposedSchemas\n    }, {\n      headers: {\n        'Content-Type': 'application/json' // ✅ Important Fix\n      }\n    });\n    console.log(response.data.message);\n    return response.data.message;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    console.error('Error:', ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || error.message);\n    return 'Failed to check dependency preservation';\n  }\n};","map":{"version":3,"names":["axios","defaults","baseURL","uploadFile","file","formData","FormData","append","response","post","headers","data","message","error","_error$response","_error$response$data","Error","triggerBackendStep","stepName","endpointMap","ConvertToCSV","CleanModify","FDModified","KeyDetection","NormalizeTable","DependencyPreservation","LosslessCheck","ERDiagram","endpoint","_error$response2","_error$response2$data","fetchCodeForStep","get","code","_error$response3","_error$response3$data","fetchNormalizedTables","tables","console","fetchTableData","tableName","rows","_error$response4","_error$response4$data","checkDependencyPreservation","originalFDs","decomposedSchemas","original_fds","decomposed_schemas","log","_error$response5","_error$response5$data"],"sources":["D:/DBMS/DBMS Project/frontend/src/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Set base URL for backend API (adjust if needed)\r\naxios.defaults.baseURL = 'http://localhost:5000';  // Change if deploying to a server\r\n\r\n// ---------------------- File Upload ---------------------- //\r\nexport const uploadFile = async (file) => {\r\n  const formData = new FormData();\r\n  formData.append('file', file);\r\n  try {\r\n    const response = await axios.post('/api/upload', formData, {\r\n      headers: { 'Content-Type': 'multipart/form-data' },\r\n    });\r\n    return response.data.message;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'File upload failed');\r\n  }\r\n};\r\n\r\n// ---------------------- Backend Actions ---------------------- //\r\nexport const triggerBackendStep = async (stepName) => {\r\n  const endpointMap = {\r\n    ConvertToCSV: '/api/convert_to_csv',\r\n    CleanModify: '/api/clean_modify',\r\n    FDModified: '/api/fd_modified',\r\n    KeyDetection: '/api/key_detection',\r\n    NormalizeTable: '/api/normalize_table',\r\n    DependencyPreservation: '/api/dependency_preservation',\r\n    LosslessCheck: '/api/lossless_check',\r\n    ERDiagram: '/api/generate_er_diagram',\r\n  };\r\n\r\n  const endpoint = endpointMap[stepName];\r\n  if (!endpoint) {\r\n    throw new Error('Invalid step name');\r\n  }\r\n\r\n  try {\r\n    const response = await axios.post(endpoint);\r\n    return response.data.message;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || `Failed to trigger ${stepName}`);\r\n  }\r\n};\r\n\r\n// ---------------------- Fetch Backend Code ---------------------- //\r\nexport const fetchCodeForStep = async (stepName) => {\r\n  try {\r\n    const response = await axios.get(`/api/code/${stepName}`);\r\n    return response.data.code;\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch code');\r\n  }\r\n};\r\n\r\n// ---------------------- Fetch Normalized Tables ---------------------- //\r\n\r\nexport const fetchNormalizedTables = async () => {\r\n  try {\r\n    const response = await axios.get('/api/normalized_tables');\r\n    return response.data.tables || [];  // Ensure it always returns an array\r\n  } catch (error) {\r\n    console.error('Error fetching normalized tables:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n// ---------------------- Fetch Table Data ---------------------- //\r\nexport const fetchTableData = async (tableName) => {\r\n  try {\r\n    const response = await axios.get(`/api/table/${tableName}`);\r\n    return response.data.rows || [];\r\n  } catch (error) {\r\n    throw new Error(error.response?.data?.message || 'Failed to fetch table data');\r\n  }\r\n};\r\n\r\n\r\n\r\nconst checkDependencyPreservation = async (originalFDs, decomposedSchemas) => {\r\n  try {\r\n    const response = await axios.post(\r\n      '/api/dependency_preservation',\r\n      {\r\n        original_fds: originalFDs,\r\n        decomposed_schemas: decomposedSchemas\r\n      },\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json'  // ✅ Important Fix\r\n        }\r\n      }\r\n    );\r\n    console.log(response.data.message);\r\n    return response.data.message;\r\n  } catch (error) {\r\n    console.error('Error:', error.response?.data?.message || error.message);\r\n    return 'Failed to check dependency preservation';\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}