{"ast":null,"code":"/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context) {\n  return {\n    documentation: {\n      CommentProvider: services => new DefaultCommentProvider(services),\n      DocumentationProvider: services => new JSDocDocumentationProvider(services)\n    },\n    parser: {\n      AsyncParser: services => new DefaultAsyncParser(services),\n      GrammarConfig: services => createGrammarConfig(services),\n      LangiumParser: services => createLangiumParser(services),\n      CompletionParser: services => createCompletionParser(services),\n      ValueConverter: () => new DefaultValueConverter(),\n      TokenBuilder: () => new DefaultTokenBuilder(),\n      Lexer: services => new DefaultLexer(services),\n      ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\n      LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\n    },\n    workspace: {\n      AstNodeLocator: () => new DefaultAstNodeLocator(),\n      AstNodeDescriptionProvider: services => new DefaultAstNodeDescriptionProvider(services),\n      ReferenceDescriptionProvider: services => new DefaultReferenceDescriptionProvider(services)\n    },\n    references: {\n      Linker: services => new DefaultLinker(services),\n      NameProvider: () => new DefaultNameProvider(),\n      ScopeProvider: services => new DefaultScopeProvider(services),\n      ScopeComputation: services => new DefaultScopeComputation(services),\n      References: services => new DefaultReferences(services)\n    },\n    serializer: {\n      Hydrator: services => new DefaultHydrator(services),\n      JsonSerializer: services => new DefaultJsonSerializer(services)\n    },\n    validation: {\n      DocumentValidator: services => new DefaultDocumentValidator(services),\n      ValidationRegistry: services => new ValidationRegistry(services)\n    },\n    shared: () => context.shared\n  };\n}\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context) {\n  return {\n    ServiceRegistry: services => new DefaultServiceRegistry(services),\n    workspace: {\n      LangiumDocuments: services => new DefaultLangiumDocuments(services),\n      LangiumDocumentFactory: services => new DefaultLangiumDocumentFactory(services),\n      DocumentBuilder: services => new DefaultDocumentBuilder(services),\n      IndexManager: services => new DefaultIndexManager(services),\n      WorkspaceManager: services => new DefaultWorkspaceManager(services),\n      FileSystemProvider: services => context.fileSystemProvider(services),\n      WorkspaceLock: () => new DefaultWorkspaceLock(),\n      ConfigurationProvider: services => new DefaultConfigurationProvider(services)\n    }\n  };\n}","map":{"version":3,"names":["createGrammarConfig","createCompletionParser","createLangiumParser","DefaultTokenBuilder","DefaultValueConverter","DefaultLinker","DefaultNameProvider","DefaultReferences","DefaultScopeComputation","DefaultScopeProvider","DefaultJsonSerializer","DefaultServiceRegistry","DefaultDocumentValidator","ValidationRegistry","DefaultAstNodeDescriptionProvider","DefaultReferenceDescriptionProvider","DefaultAstNodeLocator","DefaultConfigurationProvider","DefaultDocumentBuilder","DefaultLangiumDocumentFactory","DefaultLangiumDocuments","DefaultIndexManager","DefaultWorkspaceManager","DefaultLexer","DefaultLexerErrorMessageProvider","JSDocDocumentationProvider","DefaultCommentProvider","LangiumParserErrorMessageProvider","DefaultAsyncParser","DefaultWorkspaceLock","DefaultHydrator","createDefaultCoreModule","context","documentation","CommentProvider","services","DocumentationProvider","parser","AsyncParser","GrammarConfig","LangiumParser","CompletionParser","ValueConverter","TokenBuilder","Lexer","ParserErrorMessageProvider","LexerErrorMessageProvider","workspace","AstNodeLocator","AstNodeDescriptionProvider","ReferenceDescriptionProvider","references","Linker","NameProvider","ScopeProvider","ScopeComputation","References","serializer","Hydrator","JsonSerializer","validation","DocumentValidator","shared","createDefaultSharedCoreModule","ServiceRegistry","LangiumDocuments","LangiumDocumentFactory","DocumentBuilder","IndexManager","WorkspaceManager","FileSystemProvider","fileSystemProvider","WorkspaceLock","ConfigurationProvider"],"sources":["D:\\DBMS\\DBMS Project\\frontend\\node_modules\\langium\\src\\default-module.ts"],"sourcesContent":["/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n******************************************************************************/\r\n\r\nimport type { Module } from './dependency-injection.js';\r\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport { createGrammarConfig } from './languages/grammar-config.js';\r\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\r\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\r\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\r\nimport { DefaultValueConverter } from './parser/value-converter.js';\r\nimport { DefaultLinker } from './references/linker.js';\r\nimport { DefaultNameProvider } from './references/name-provider.js';\r\nimport { DefaultReferences } from './references/references.js';\r\nimport { DefaultScopeComputation } from './references/scope-computation.js';\r\nimport { DefaultScopeProvider } from './references/scope-provider.js';\r\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\r\nimport { DefaultServiceRegistry } from './service-registry.js';\r\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\r\nimport { ValidationRegistry } from './validation/validation-registry.js';\r\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\r\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\r\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\r\nimport { DefaultIndexManager } from './workspace/index-manager.js';\r\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\r\nimport { DefaultLexer, DefaultLexerErrorMessageProvider } from './parser/lexer.js';\r\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\r\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\r\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\r\nimport { DefaultAsyncParser } from './parser/async-parser.js';\r\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\r\nimport { DefaultHydrator } from './serializer/hydrator.js';\r\n\r\n/**\r\n * Context required for creating the default language-specific dependency injection module.\r\n */\r\nexport interface DefaultCoreModuleContext {\r\n    shared: LangiumSharedCoreServices;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default core services.\r\n * This is a set of services that are dedicated to a specific language.\r\n */\r\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\r\n    return {\r\n        documentation: {\r\n            CommentProvider: (services) => new DefaultCommentProvider(services),\r\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\r\n        },\r\n        parser: {\r\n            AsyncParser: (services) => new DefaultAsyncParser(services),\r\n            GrammarConfig: (services) => createGrammarConfig(services),\r\n            LangiumParser: (services) => createLangiumParser(services),\r\n            CompletionParser: (services) => createCompletionParser(services),\r\n            ValueConverter: () => new DefaultValueConverter(),\r\n            TokenBuilder: () => new DefaultTokenBuilder(),\r\n            Lexer: (services) => new DefaultLexer(services),\r\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider(),\r\n            LexerErrorMessageProvider: () => new DefaultLexerErrorMessageProvider()\r\n        },\r\n        workspace: {\r\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\r\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\r\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\r\n        },\r\n        references: {\r\n            Linker: (services) => new DefaultLinker(services),\r\n            NameProvider: () => new DefaultNameProvider(),\r\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\r\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\r\n            References: (services) => new DefaultReferences(services)\r\n        },\r\n        serializer: {\r\n            Hydrator: (services) => new DefaultHydrator(services),\r\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\r\n        },\r\n        validation: {\r\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\r\n            ValidationRegistry: (services) => new ValidationRegistry(services)\r\n        },\r\n        shared: () => context.shared\r\n    };\r\n}\r\n\r\n/**\r\n * Context required for creating the default shared dependency injection module.\r\n */\r\nexport interface DefaultSharedCoreModuleContext {\r\n    /**\r\n     * Factory function to create a {@link FileSystemProvider}.\r\n     *\r\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\r\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\r\n     * the `EmptyFileSystem` in every other use case.\r\n     */\r\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\r\n}\r\n\r\n/**\r\n * Creates a dependency injection module configuring the default shared core services.\r\n * This is the set of services that are shared between multiple languages.\r\n */\r\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\r\n    return {\r\n        ServiceRegistry: (services) => new DefaultServiceRegistry(services),\r\n        workspace: {\r\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\r\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\r\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\r\n            IndexManager: (services) => new DefaultIndexManager(services),\r\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\r\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\r\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\r\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\r\n        }\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}