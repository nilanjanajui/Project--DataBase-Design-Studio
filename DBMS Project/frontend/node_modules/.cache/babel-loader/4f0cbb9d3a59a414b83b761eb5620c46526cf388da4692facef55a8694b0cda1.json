{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateProvider = ({\n  children\n}) => {\n  _s();\n  const [workflowSteps, setWorkflowSteps] = useState([]); // [{id, name}]\n  const [selectedStep, setSelectedStep] = useState(null); // step id\n  const [codeForStep, setCodeForStep] = useState(\"\");\n  const [normalizedTables, setNormalizedTables] = useState([]);\n  const [selectedTable, setSelectedTable] = useState(null);\n  const [tableData, setTableData] = useState([]); // array of objects for table view\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Add a new workflow step\n  const addStep = name => {\n    const id = Date.now();\n    setWorkflowSteps(prev => [...prev, {\n      id,\n      name\n    }]);\n  };\n\n  // Select a workflow step and fetch its code (and tables if applicable)\n  const selectStep = async id => {\n    const step = workflowSteps.find(s => s.id === id);\n    if (!step) return;\n    setSelectedStep(id);\n    setCodeForStep(\"\");\n    setNormalizedTables([]);\n    setSelectedTable(null);\n    setTableData([]);\n    setIsLoading(true);\n    try {\n      // Fetch code for the step\n      const resCode = await axios.get(`/api/code/${step.name}`);\n      setCodeForStep(resCode.data.code || \"\");\n\n      // If step is normalization, fetch list of normalized tables\n      if (step.name.toLowerCase().includes(\"normalize\") || step.name === \"normalizedTable\") {\n        const resTables = await axios.get(\"/api/normalized_tables\");\n        setNormalizedTables(resTables.data.tables || []);\n      }\n      setMessages(m => [...m, `Loaded code for ${step.name}`]);\n    } catch (err) {\n      setMessages(m => [...m, `Error loading step: ${err.message}`]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Select a normalized table and fetch its data (from normalized_table_data API)\n  const selectTable = async tableName => {\n    setSelectedTable(tableName);\n    setTableData([]);\n    setIsLoading(true);\n    try {\n      const res = await axios.get(`/api/normalized_table_data/${tableName}`);\n      const {\n        columns,\n        rows\n      } = res.data;\n\n      // Convert to array of objects for display\n      const rowsOfObjects = rows.map(row => {\n        let obj = {};\n        columns.forEach((col, idx) => {\n          obj[col] = row[idx];\n        });\n        return obj;\n      });\n      setTableData(rowsOfObjects);\n      setMessages(m => [...m, `Loaded table ${tableName}`]);\n    } catch (err) {\n      setMessages(m => [...m, `Error loading table: ${err.message}`]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      workflowSteps,\n      addStep,\n      selectedStep,\n      selectStep,\n      codeForStep,\n      normalizedTables,\n      selectedTable,\n      selectTable,\n      tableData,\n      messages,\n      isLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(StateProvider, \"u5SRUV+LcYOwRgzBTqF6hCK+0lg=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s2();\n  return useContext(StateContext);\n};\n_s2(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","StateContext","StateProvider","children","_s","workflowSteps","setWorkflowSteps","selectedStep","setSelectedStep","codeForStep","setCodeForStep","normalizedTables","setNormalizedTables","selectedTable","setSelectedTable","tableData","setTableData","messages","setMessages","isLoading","setIsLoading","addStep","name","id","Date","now","prev","selectStep","step","find","s","resCode","get","data","code","toLowerCase","includes","resTables","tables","m","err","message","selectTable","tableName","res","columns","rows","rowsOfObjects","map","row","obj","forEach","col","idx","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ children }) => {\r\n  const [workflowSteps, setWorkflowSteps] = useState([]); // [{id, name}]\r\n  const [selectedStep, setSelectedStep] = useState(null); // step id\r\n  const [codeForStep, setCodeForStep] = useState(\"\");\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n  const [selectedTable, setSelectedTable] = useState(null);\r\n  const [tableData, setTableData] = useState([]); // array of objects for table view\r\n  const [messages, setMessages] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // Add a new workflow step\r\n  const addStep = (name) => {\r\n    const id = Date.now();\r\n    setWorkflowSteps((prev) => [...prev, { id, name }]);\r\n  };\r\n\r\n  // Select a workflow step and fetch its code (and tables if applicable)\r\n  const selectStep = async (id) => {\r\n    const step = workflowSteps.find((s) => s.id === id);\r\n    if (!step) return;\r\n    setSelectedStep(id);\r\n    setCodeForStep(\"\");\r\n    setNormalizedTables([]);\r\n    setSelectedTable(null);\r\n    setTableData([]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      // Fetch code for the step\r\n      const resCode = await axios.get(`/api/code/${step.name}`);\r\n      setCodeForStep(resCode.data.code || \"\");\r\n\r\n      // If step is normalization, fetch list of normalized tables\r\n      if (step.name.toLowerCase().includes(\"normalize\") || step.name === \"normalizedTable\") {\r\n        const resTables = await axios.get(\"/api/normalized_tables\");\r\n        setNormalizedTables(resTables.data.tables || []);\r\n      }\r\n\r\n      setMessages((m) => [...m, `Loaded code for ${step.name}`]);\r\n    } catch (err) {\r\n      setMessages((m) => [...m, `Error loading step: ${err.message}`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Select a normalized table and fetch its data (from normalized_table_data API)\r\n  const selectTable = async (tableName) => {\r\n    setSelectedTable(tableName);\r\n    setTableData([]);\r\n    setIsLoading(true);\r\n    try {\r\n      const res = await axios.get(`/api/normalized_table_data/${tableName}`);\r\n      const { columns, rows } = res.data;\r\n\r\n      // Convert to array of objects for display\r\n      const rowsOfObjects = rows.map((row) => {\r\n        let obj = {};\r\n        columns.forEach((col, idx) => {\r\n          obj[col] = row[idx];\r\n        });\r\n        return obj;\r\n      });\r\n\r\n      setTableData(rowsOfObjects);\r\n      setMessages((m) => [...m, `Loaded table ${tableName}`]);\r\n    } catch (err) {\r\n      setMessages((m) => [...m, `Error loading table: ${err.message}`]);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        workflowSteps,\r\n        addStep,\r\n        selectedStep,\r\n        selectStep,\r\n        codeForStep,\r\n        normalizedTables,\r\n        selectedTable,\r\n        selectTable,\r\n        tableData,\r\n        messages,\r\n        isLoading,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}