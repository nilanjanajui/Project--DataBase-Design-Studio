{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\components\\\\OutputPanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState, useEffect } from 'react';\nimport { useStateContext } from '../context/StateContext';\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OutputPanel = () => {\n  _s();\n  const {\n    workflowSteps,\n    fetchCode,\n    isLoading\n  } = useStateContext();\n  const [positions, setPositions] = useState({});\n  const panelRef = useRef(null);\n  const handleDrag = (e, data, step) => {\n    setPositions(prev => ({\n      ...prev,\n      [step]: {\n        x: data.x,\n        y: data.y\n      }\n    }));\n  };\n  const handleBlockClick = step => {\n    fetchCode(step);\n  };\n  useEffect(() => {\n    // Initialize positions for new steps\n    let updated = false;\n    const newPositions = {\n      ...positions\n    };\n    workflowSteps.forEach((step, index) => {\n      if (!positions[step]) {\n        newPositions[step] = {\n          x: 50,\n          y: 60 * index\n        };\n        updated = true;\n      }\n    });\n    if (updated) setPositions(newPositions);\n  }, [workflowSteps]);\n  const renderWires = () => {\n    var _panelRef$current;\n    const wires = [];\n    const panelRect = (_panelRef$current = panelRef.current) === null || _panelRef$current === void 0 ? void 0 : _panelRef$current.getBoundingClientRect();\n    for (let i = 0; i < workflowSteps.length - 1; i++) {\n      const fromStep = workflowSteps[i];\n      const toStep = workflowSteps[i + 1];\n      const fromPos = positions[fromStep];\n      const toPos = positions[toStep];\n      if (fromPos && toPos && panelRect) {\n        wires.push(/*#__PURE__*/_jsxDEV(\"line\", {\n          x1: fromPos.x + 100,\n          y1: fromPos.y + 20,\n          x2: toPos.x,\n          y2: toPos.y + 20,\n          stroke: \"black\",\n          strokeWidth: \"2\"\n        }, `${fromStep}-${toStep}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this));\n      }\n    }\n    return wires;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-panel\",\n    ref: panelRef,\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Workflow Output\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"workflow-area\",\n      style: {\n        position: 'relative',\n        height: '400px',\n        border: '1px solid #ccc'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"wires-svg\",\n        style: {\n          position: 'absolute',\n          top: 0,\n          left: 0,\n          width: '100%',\n          height: '100%'\n        },\n        children: renderWires()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), workflowSteps.map(step => /*#__PURE__*/_jsxDEV(Draggable, {\n        position: positions[step],\n        onDrag: (e, data) => handleDrag(e, data, step),\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"workflow-block\",\n          onClick: () => handleBlockClick(step),\n          style: {\n            width: '100px',\n            padding: '10px',\n            borderRadius: '8px',\n            backgroundColor: '#e0e0e0',\n            textAlign: 'center',\n            position: 'absolute',\n            cursor: 'pointer',\n            userSelect: 'none'\n          },\n          children: step\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, step, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPanel, \"LgLpS8lRSSEj8HKf4WDgftxB1TY=\", false, function () {\n  return [useStateContext];\n});\n_c = OutputPanel;\nexport default OutputPanel;\nvar _c;\n$RefreshReg$(_c, \"OutputPanel\");","map":{"version":3,"names":["React","useRef","useState","useEffect","useStateContext","Draggable","jsxDEV","_jsxDEV","OutputPanel","_s","workflowSteps","fetchCode","isLoading","positions","setPositions","panelRef","handleDrag","e","data","step","prev","x","y","handleBlockClick","updated","newPositions","forEach","index","renderWires","_panelRef$current","wires","panelRect","current","getBoundingClientRect","i","length","fromStep","toStep","fromPos","toPos","push","x1","y1","x2","y2","stroke","strokeWidth","fileName","_jsxFileName","lineNumber","columnNumber","className","ref","children","style","position","height","border","top","left","width","map","onDrag","onClick","padding","borderRadius","backgroundColor","textAlign","cursor","userSelect","_c","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/components/OutputPanel.jsx"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { useStateContext } from '../context/StateContext';\r\nimport Draggable from 'react-draggable';\r\n\r\nconst OutputPanel = () => {\r\n  const { workflowSteps, fetchCode, isLoading } = useStateContext();\r\n  const [positions, setPositions] = useState({});\r\n  const panelRef = useRef(null);\r\n\r\n  const handleDrag = (e, data, step) => {\r\n    setPositions(prev => ({\r\n      ...prev,\r\n      [step]: { x: data.x, y: data.y }\r\n    }));\r\n  };\r\n\r\n  const handleBlockClick = (step) => {\r\n    fetchCode(step);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Initialize positions for new steps\r\n    let updated = false;\r\n    const newPositions = { ...positions };\r\n    workflowSteps.forEach((step, index) => {\r\n      if (!positions[step]) {\r\n        newPositions[step] = { x: 50, y: 60 * index };\r\n        updated = true;\r\n      }\r\n    });\r\n    if (updated) setPositions(newPositions);\r\n  }, [workflowSteps]);\r\n\r\n  const renderWires = () => {\r\n    const wires = [];\r\n    const panelRect = panelRef.current?.getBoundingClientRect();\r\n\r\n    for (let i = 0; i < workflowSteps.length - 1; i++) {\r\n      const fromStep = workflowSteps[i];\r\n      const toStep = workflowSteps[i + 1];\r\n      const fromPos = positions[fromStep];\r\n      const toPos = positions[toStep];\r\n\r\n      if (fromPos && toPos && panelRect) {\r\n        wires.push(\r\n          <line\r\n            key={`${fromStep}-${toStep}`}\r\n            x1={fromPos.x + 100}\r\n            y1={fromPos.y + 20}\r\n            x2={toPos.x}\r\n            y2={toPos.y + 20}\r\n            stroke=\"black\"\r\n            strokeWidth=\"2\"\r\n          />\r\n        );\r\n      }\r\n    }\r\n    return wires;\r\n  };\r\n\r\n  return (\r\n    <div className=\"output-panel\" ref={panelRef}>\r\n      <h2>Workflow Output</h2>\r\n      <div className=\"workflow-area\" style={{ position: 'relative', height: '400px', border: '1px solid #ccc' }}>\r\n        <svg className=\"wires-svg\" style={{ position: 'absolute', top: 0, left: 0, width: '100%', height: '100%' }}>\r\n          {renderWires()}\r\n        </svg>\r\n        {workflowSteps.map((step) => (\r\n          <Draggable\r\n            key={step}\r\n            position={positions[step]}\r\n            onDrag={(e, data) => handleDrag(e, data, step)}\r\n          >\r\n            <div\r\n              className=\"workflow-block\"\r\n              onClick={() => handleBlockClick(step)}\r\n              style={{\r\n                width: '100px',\r\n                padding: '10px',\r\n                borderRadius: '8px',\r\n                backgroundColor: '#e0e0e0',\r\n                textAlign: 'center',\r\n                position: 'absolute',\r\n                cursor: 'pointer',\r\n                userSelect: 'none',\r\n              }}\r\n            >\r\n              {step}\r\n            </div>\r\n          </Draggable>\r\n        ))}\r\n      </div>\r\n      {isLoading && <p>Loading...</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}