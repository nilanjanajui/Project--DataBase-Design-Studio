{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\context\\\\StateContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StateContext = /*#__PURE__*/createContext();\nexport const StateProvider = ({\n  children\n}) => {\n  _s();\n  // Workflow steps in output panel — each step has unique id, name, and position {x,y}\n  const [workflowSteps, setWorkflowSteps] = useState([]);\n\n  // Currently selected step's code\n  const [currentCode, setCurrentCodeState] = useState(\"\");\n\n  // Log messages for MessagePanel\n  const [messages, setMessages] = useState([]);\n\n  // Normalized table names (buttons in MessagePanel)\n  const [normalizedTables, setNormalizedTables] = useState([]);\n\n  // Selected table for normalized table viewing\n  const [selectedTable, setSelectedTable] = useState(null);\n\n  // Add a workflow step button to output panel, if not exists, start with default position\n  const addWorkflowStep = stepName => {\n    if (!workflowSteps.find(s => s.name === stepName)) {\n      setWorkflowSteps(prev => [...prev, {\n        id: Date.now().toString(),\n        name: stepName,\n        x: 20,\n        y: 20 + prev.length * 60\n      }]);\n    }\n  };\n\n  // Update position of workflow step (on drag)\n  const updateWorkflowStepPosition = (id, x, y) => {\n    setWorkflowSteps(prev => prev.map(step => step.id === id ? {\n      ...step,\n      x,\n      y\n    } : step));\n  };\n\n  // Fetch backend code for a step name\n  const fetchCode = async stepName => {\n    try {\n      const res = await axios.get(`/api/code/${stepName}`);\n      return res.data.code;\n    } catch (e) {\n      return \"// Error fetching code\";\n    }\n  };\n\n  // Update current code to display in CodePanel\n  const setCurrentCode = code => {\n    setCurrentCodeState(code);\n  };\n\n  // Add message to message log\n  const addMessage = msg => {\n    setMessages(prev => [...prev, msg]);\n  };\n\n  // Fetch normalized tables list from backend\n  const fetchNormalizedTables = async () => {\n    try {\n      const res = await axios.get(\"/api/normalized_tables\");\n      setNormalizedTables(res.data.tables || []);\n    } catch {\n      addMessage(\"Failed to fetch normalized tables\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(StateContext.Provider, {\n    value: {\n      workflowSteps,\n      addWorkflowStep,\n      updateWorkflowStepPosition,\n      fetchCode,\n      currentCode,\n      setCurrentCode,\n      messages,\n      addMessage,\n      normalizedTables,\n      fetchNormalizedTables,\n      selectedTable,\n      setSelectedTable\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s(StateProvider, \"ipe252H11qOu8k3qApaSqQgL9kI=\");\n_c = StateProvider;\nexport const useStateContext = () => {\n  _s2();\n  return useContext(StateContext);\n};\n_s2(useStateContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"StateProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","axios","jsxDEV","_jsxDEV","StateContext","StateProvider","children","_s","workflowSteps","setWorkflowSteps","currentCode","setCurrentCodeState","messages","setMessages","normalizedTables","setNormalizedTables","selectedTable","setSelectedTable","addWorkflowStep","stepName","find","s","name","prev","id","Date","now","toString","x","y","length","updateWorkflowStepPosition","map","step","fetchCode","res","get","data","code","e","setCurrentCode","addMessage","msg","fetchNormalizedTables","tables","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useStateContext","_s2","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/context/StateContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nconst StateContext = createContext();\r\n\r\nexport const StateProvider = ({ children }) => {\r\n  // Workflow steps in output panel — each step has unique id, name, and position {x,y}\r\n  const [workflowSteps, setWorkflowSteps] = useState([]);\r\n\r\n  // Currently selected step's code\r\n  const [currentCode, setCurrentCodeState] = useState(\"\");\r\n\r\n  // Log messages for MessagePanel\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  // Normalized table names (buttons in MessagePanel)\r\n  const [normalizedTables, setNormalizedTables] = useState([]);\r\n\r\n  // Selected table for normalized table viewing\r\n  const [selectedTable, setSelectedTable] = useState(null);\r\n\r\n  // Add a workflow step button to output panel, if not exists, start with default position\r\n  const addWorkflowStep = (stepName) => {\r\n    if (!workflowSteps.find((s) => s.name === stepName)) {\r\n      setWorkflowSteps((prev) => [\r\n        ...prev,\r\n        { id: Date.now().toString(), name: stepName, x: 20, y: 20 + prev.length * 60 },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  // Update position of workflow step (on drag)\r\n  const updateWorkflowStepPosition = (id, x, y) => {\r\n    setWorkflowSteps((prev) =>\r\n      prev.map((step) => (step.id === id ? { ...step, x, y } : step))\r\n    );\r\n  };\r\n\r\n  // Fetch backend code for a step name\r\n  const fetchCode = async (stepName) => {\r\n    try {\r\n      const res = await axios.get(`/api/code/${stepName}`);\r\n      return res.data.code;\r\n    } catch (e) {\r\n      return \"// Error fetching code\";\r\n    }\r\n  };\r\n\r\n  // Update current code to display in CodePanel\r\n  const setCurrentCode = (code) => {\r\n    setCurrentCodeState(code);\r\n  };\r\n\r\n  // Add message to message log\r\n  const addMessage = (msg) => {\r\n    setMessages((prev) => [...prev, msg]);\r\n  };\r\n\r\n  // Fetch normalized tables list from backend\r\n  const fetchNormalizedTables = async () => {\r\n    try {\r\n      const res = await axios.get(\"/api/normalized_tables\");\r\n      setNormalizedTables(res.data.tables || []);\r\n    } catch {\r\n      addMessage(\"Failed to fetch normalized tables\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <StateContext.Provider\r\n      value={{\r\n        workflowSteps,\r\n        addWorkflowStep,\r\n        updateWorkflowStepPosition,\r\n        fetchCode,\r\n        currentCode,\r\n        setCurrentCode,\r\n        messages,\r\n        addMessage,\r\n        normalizedTables,\r\n        fetchNormalizedTables,\r\n        selectedTable,\r\n        setSelectedTable,\r\n      }}\r\n    >\r\n      {children}\r\n    </StateContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useStateContext = () => useContext(StateContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}