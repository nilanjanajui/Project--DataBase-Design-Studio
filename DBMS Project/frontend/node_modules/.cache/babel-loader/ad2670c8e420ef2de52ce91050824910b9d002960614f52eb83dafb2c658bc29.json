{"ast":null,"code":"/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nexport {};","map":{"version":3,"names":[],"sources":["D:\\DBMS\\DBMS Project\\frontend\\node_modules\\langium\\src\\services.ts"],"sourcesContent":["/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\n// Ensure that all imports are erased at runtime to avoid circular dependencies.\r\nimport type { IParserErrorMessageProvider, ILexerErrorMessageProvider } from 'chevrotain';\r\nimport type { CommentProvider } from './documentation/comment-provider.js';\r\nimport type { DocumentationProvider } from './documentation/documentation-provider.js';\r\nimport type { Grammar } from './languages/generated/ast.js';\r\nimport type { GrammarConfig } from './languages/grammar-config.js';\r\nimport type { LanguageMetaData } from './languages/language-meta-data.js';\r\nimport type { AsyncParser } from './parser/async-parser.js';\r\nimport type { LangiumCompletionParser, LangiumParser } from './parser/langium-parser.js';\r\nimport type { Lexer } from './parser/lexer.js';\r\nimport type { IParserConfig } from './parser/parser-config.js';\r\nimport type { TokenBuilder } from './parser/token-builder.js';\r\nimport type { ValueConverter } from './parser/value-converter.js';\r\nimport type { Linker } from './references/linker.js';\r\nimport type { NameProvider } from './references/name-provider.js';\r\nimport type { References } from './references/references.js';\r\nimport type { ScopeComputation } from './references/scope-computation.js';\r\nimport type { ScopeProvider } from './references/scope-provider.js';\r\nimport type { JsonSerializer } from './serializer/json-serializer.js';\r\nimport type { ServiceRegistry } from './service-registry.js';\r\nimport type { AstReflection } from './syntax-tree.js';\r\nimport type { DocumentValidator } from './validation/document-validator.js';\r\nimport type { ValidationRegistry } from './validation/validation-registry.js';\r\nimport type { AstNodeDescriptionProvider, ReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\r\nimport type { AstNodeLocator } from './workspace/ast-node-locator.js';\r\nimport type { ConfigurationProvider } from './workspace/configuration.js';\r\nimport type { DocumentBuilder } from './workspace/document-builder.js';\r\nimport type { LangiumDocumentFactory, LangiumDocuments, TextDocumentProvider } from './workspace/documents.js';\r\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\r\nimport type { IndexManager } from './workspace/index-manager.js';\r\nimport type { WorkspaceLock } from './workspace/workspace-lock.js';\r\nimport type { Hydrator } from './serializer/hydrator.js';\r\nimport type { WorkspaceManager } from './workspace/workspace-manager.js';\r\n\r\n/**\r\n * The services generated by `langium-cli` for a specific language. These are derived from the\r\n * grammar definition and the language configuration.\r\n */\r\nexport type LangiumGeneratedCoreServices = {\r\n    readonly Grammar: Grammar\r\n    readonly LanguageMetaData: LanguageMetaData\r\n    readonly parser: {\r\n        readonly ParserConfig?: IParserConfig\r\n    }\r\n}\r\n\r\n/**\r\n * Core services for a specific language of which Langium provides default implementations.\r\n */\r\nexport type LangiumDefaultCoreServices = {\r\n    readonly parser: {\r\n        readonly AsyncParser: AsyncParser\r\n        readonly GrammarConfig: GrammarConfig\r\n        readonly ValueConverter: ValueConverter\r\n        readonly LangiumParser: LangiumParser\r\n        readonly ParserErrorMessageProvider: IParserErrorMessageProvider\r\n        readonly LexerErrorMessageProvider: ILexerErrorMessageProvider\r\n        readonly CompletionParser: LangiumCompletionParser\r\n        readonly TokenBuilder: TokenBuilder\r\n        readonly Lexer: Lexer\r\n    }\r\n    readonly documentation: {\r\n        readonly CommentProvider: CommentProvider\r\n        readonly DocumentationProvider: DocumentationProvider\r\n    }\r\n    readonly references: {\r\n        readonly Linker: Linker\r\n        readonly NameProvider: NameProvider\r\n        readonly References: References\r\n        readonly ScopeProvider: ScopeProvider\r\n        readonly ScopeComputation: ScopeComputation\r\n    }\r\n    readonly serializer: {\r\n        readonly Hydrator: Hydrator\r\n        readonly JsonSerializer: JsonSerializer\r\n    }\r\n    readonly validation: {\r\n        readonly DocumentValidator: DocumentValidator\r\n        readonly ValidationRegistry: ValidationRegistry\r\n    }\r\n    readonly workspace: {\r\n        readonly AstNodeLocator: AstNodeLocator\r\n        readonly AstNodeDescriptionProvider: AstNodeDescriptionProvider\r\n        readonly ReferenceDescriptionProvider: ReferenceDescriptionProvider\r\n    }\r\n    readonly shared: LangiumSharedCoreServices\r\n}\r\n\r\n/**\r\n * The core set of services available for a language. These are either generated by `langium-cli`\r\n * or provided as default implementations.\r\n */\r\nexport type LangiumCoreServices = LangiumGeneratedCoreServices & LangiumDefaultCoreServices\r\n\r\n/**\r\n * The services generated by `langium-cli` that are shared between multiple languages. These are\r\n * derived from the grammar definition.\r\n */\r\nexport type LangiumGeneratedSharedCoreServices = {\r\n    readonly AstReflection: AstReflection\r\n}\r\n\r\n/**\r\n * Core services shared between multiple languages where Langium provides default implementations.\r\n */\r\nexport type LangiumDefaultSharedCoreServices = {\r\n    readonly ServiceRegistry: ServiceRegistry\r\n    readonly workspace: {\r\n        readonly ConfigurationProvider: ConfigurationProvider\r\n        readonly DocumentBuilder: DocumentBuilder\r\n        readonly FileSystemProvider: FileSystemProvider\r\n        readonly IndexManager: IndexManager\r\n        readonly LangiumDocuments: LangiumDocuments\r\n        readonly LangiumDocumentFactory: LangiumDocumentFactory\r\n        readonly TextDocuments?: TextDocumentProvider\r\n        readonly WorkspaceLock: WorkspaceLock\r\n        readonly WorkspaceManager: WorkspaceManager\r\n    }\r\n}\r\n\r\n/**\r\n * The shared core services are a set of services that are used by every language within a Langium project (excluding LSP services)\r\n * This is necessary to enable features like cross references across different languages.\r\n */\r\nexport type LangiumSharedCoreServices = LangiumDefaultSharedCoreServices & LangiumGeneratedSharedCoreServices\r\n\r\n/**\r\n * A deep partial type definition for services. We look into T to see whether its type definition contains\r\n * any methods. If it does, it's one of our services and therefore should not be partialized.\r\n */\r\n//eslint-disable-next-line @typescript-eslint/ban-types\r\nexport type DeepPartial<T> = T[keyof T] extends Function ? T : {\r\n    [P in keyof T]?: DeepPartial<T[P]>;\r\n}\r\n\r\n/**\r\n * Language-specific core services to be partially overridden via dependency injection.\r\n */\r\nexport type PartialLangiumCoreServices = DeepPartial<LangiumCoreServices>\r\n\r\n/**\r\n * Shared core services to be partially overridden via dependency injection.\r\n */\r\nexport type PartialLangiumSharedCoreServices = DeepPartial<LangiumSharedCoreServices>\r\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}