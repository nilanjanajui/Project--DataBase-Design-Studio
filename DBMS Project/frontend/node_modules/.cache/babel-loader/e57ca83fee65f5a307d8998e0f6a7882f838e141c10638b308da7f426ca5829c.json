{"ast":null,"code":"var _jsxFileName = \"D:\\\\DBMS\\\\DBMS Project\\\\frontend\\\\src\\\\components\\\\OutputPanel.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useStateContext } from \"../context/StateContext\";\nimport Draggable from \"react-draggable\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OutputPanel = () => {\n  _s();\n  const {\n    workflowSteps,\n    updateWorkflowStepPosition,\n    fetchCode,\n    setCurrentCode\n  } = useStateContext();\n\n  // On button click: fetch code and show in CodePanel\n  const handleStepClick = async step => {\n    const code = await fetchCode(step.name);\n    setCurrentCode(code);\n  };\n\n  // Connect buttons with horizontal lines (SVG)\n  // We'll draw lines from each button center to next button center horizontally\n  const svgWidth = 800;\n  const svgHeight = 100;\n  const lineY = svgHeight / 2;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"output-panel\",\n    style: {\n      position: \"relative\",\n      height: \"100%\",\n      border: \"1px solid #ccc\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Output Panel\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), workflowSteps.length === 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No steps yet. Click buttons in ActionPanel.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 38\n    }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n      style: {\n        position: \"absolute\",\n        top: 60,\n        left: 0,\n        width: \"100%\",\n        height: 100,\n        pointerEvents: \"none\",\n        zIndex: 0\n      },\n      children: [workflowSteps.map((step, i) => {\n        if (i === workflowSteps.length - 1) return null;\n        const start = workflowSteps[i];\n        const end = workflowSteps[i + 1];\n        return /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: start.x + 60 // button center x\n          ,\n          y1: start.y + 20 // button center y\n          ,\n          x2: end.x + 10 // button left x\n          ,\n          y2: end.y + 20,\n          stroke: \"#000\",\n          strokeWidth: 2,\n          markerEnd: \"url(#arrowhead)\"\n        }, `${start.id}-${end.id}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"defs\", {\n        children: /*#__PURE__*/_jsxDEV(\"marker\", {\n          id: \"arrowhead\",\n          markerWidth: \"10\",\n          markerHeight: \"7\",\n          refX: \"10\",\n          refY: \"3.5\",\n          orient: \"auto\",\n          children: /*#__PURE__*/_jsxDEV(\"polygon\", {\n            points: \"0 0, 10 3.5, 0 7\",\n            fill: \"#000\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), workflowSteps.map(step => /*#__PURE__*/_jsxDEV(Draggable, {\n      position: {\n        x: step.x,\n        y: step.y\n      },\n      onDrag: (e, data) => updateWorkflowStepPosition(step.id, data.x, data.y),\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          position: \"absolute\",\n          zIndex: 1\n        },\n        onClick: () => handleStepClick(step),\n        children: step.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this)\n    }, step.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(OutputPanel, \"oMaBGUz5RNP07gnalwBcY9gyWug=\", false, function () {\n  return [useStateContext];\n});\n_c = OutputPanel;\nexport default OutputPanel;\nvar _c;\n$RefreshReg$(_c, \"OutputPanel\");","map":{"version":3,"names":["React","useStateContext","Draggable","jsxDEV","_jsxDEV","OutputPanel","_s","workflowSteps","updateWorkflowStepPosition","fetchCode","setCurrentCode","handleStepClick","step","code","name","svgWidth","svgHeight","lineY","className","style","position","height","border","children","fileName","_jsxFileName","lineNumber","columnNumber","length","top","left","width","pointerEvents","zIndex","map","i","start","end","x1","x","y1","y","x2","y2","stroke","strokeWidth","markerEnd","id","markerWidth","markerHeight","refX","refY","orient","points","fill","onDrag","e","data","onClick","_c","$RefreshReg$"],"sources":["D:/DBMS/DBMS Project/frontend/src/components/OutputPanel.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useStateContext } from \"../context/StateContext\";\r\nimport Draggable from \"react-draggable\";\r\n\r\nconst OutputPanel = () => {\r\n  const {\r\n    workflowSteps,\r\n    updateWorkflowStepPosition,\r\n    fetchCode,\r\n    setCurrentCode,\r\n  } = useStateContext();\r\n\r\n  // On button click: fetch code and show in CodePanel\r\n  const handleStepClick = async (step) => {\r\n    const code = await fetchCode(step.name);\r\n    setCurrentCode(code);\r\n  };\r\n\r\n  // Connect buttons with horizontal lines (SVG)\r\n  // We'll draw lines from each button center to next button center horizontally\r\n  const svgWidth = 800;\r\n  const svgHeight = 100;\r\n  const lineY = svgHeight / 2;\r\n\r\n  return (\r\n    <div\r\n      className=\"output-panel\"\r\n      style={{ position: \"relative\", height: \"100%\", border: \"1px solid #ccc\" }}\r\n    >\r\n      <h2>Output Panel</h2>\r\n      {workflowSteps.length === 0 && <p>No steps yet. Click buttons in ActionPanel.</p>}\r\n\r\n      {/* SVG lines connecting buttons */}\r\n      <svg\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 60,\r\n          left: 0,\r\n          width: \"100%\",\r\n          height: 100,\r\n          pointerEvents: \"none\",\r\n          zIndex: 0,\r\n        }}\r\n      >\r\n        {workflowSteps.map((step, i) => {\r\n          if (i === workflowSteps.length - 1) return null;\r\n          const start = workflowSteps[i];\r\n          const end = workflowSteps[i + 1];\r\n          return (\r\n            <line\r\n              key={`${start.id}-${end.id}`}\r\n              x1={start.x + 60} // button center x\r\n              y1={start.y + 20} // button center y\r\n              x2={end.x + 10} // button left x\r\n              y2={end.y + 20}\r\n              stroke=\"#000\"\r\n              strokeWidth={2}\r\n              markerEnd=\"url(#arrowhead)\"\r\n            />\r\n          );\r\n        })}\r\n        <defs>\r\n          <marker\r\n            id=\"arrowhead\"\r\n            markerWidth=\"10\"\r\n            markerHeight=\"7\"\r\n            refX=\"10\"\r\n            refY=\"3.5\"\r\n            orient=\"auto\"\r\n          >\r\n            <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#000\" />\r\n          </marker>\r\n        </defs>\r\n      </svg>\r\n\r\n      {/* Draggable buttons */}\r\n      {workflowSteps.map((step) => (\r\n        <Draggable\r\n          key={step.id}\r\n          position={{ x: step.x, y: step.y }}\r\n          onDrag={(e, data) => updateWorkflowStepPosition(step.id, data.x, data.y)}\r\n        >\r\n          <button\r\n            style={{ position: \"absolute\", zIndex: 1 }}\r\n            onClick={() => handleStepClick(step)}\r\n          >\r\n            {step.name}\r\n          </button>\r\n        </Draggable>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OutputPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}