{"ast":null,"code":"/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\nexport function isNamed(node) {\n  return typeof node.name === 'string';\n}\nexport class DefaultNameProvider {\n  getName(node) {\n    if (isNamed(node)) {\n      return node.name;\n    }\n    return undefined;\n  }\n  getNameNode(node) {\n    return findNodeForProperty(node.$cstNode, 'name');\n  }\n}","map":{"version":3,"names":["findNodeForProperty","isNamed","node","name","DefaultNameProvider","getName","undefined","getNameNode","$cstNode"],"sources":["D:\\DBMS\\DBMS Project\\frontend\\node_modules\\langium\\src\\references\\name-provider.ts"],"sourcesContent":["/******************************************************************************\r\n * Copyright 2021 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport type { AstNode, CstNode } from '../syntax-tree.js';\r\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\r\n\r\nexport interface NamedAstNode extends AstNode {\r\n    name: string;\r\n}\r\n\r\nexport function isNamed(node: AstNode): node is NamedAstNode {\r\n    return typeof (node as NamedAstNode).name === 'string';\r\n}\r\n\r\n/**\r\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\r\n */\r\nexport interface NameProvider {\r\n    /**\r\n     * Returns the `name` of a given AstNode.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getName(node: AstNode): string | undefined;\r\n    /**\r\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\r\n     * @param node Specified `AstNode` whose name node shall be retrieved.\r\n     */\r\n    getNameNode(node: AstNode): CstNode | undefined;\r\n}\r\n\r\nexport class DefaultNameProvider implements NameProvider {\r\n    getName(node: AstNode): string | undefined {\r\n        if (isNamed(node)) {\r\n            return node.name;\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    getNameNode(node: AstNode): CstNode | undefined {\r\n        return findNodeForProperty(node.$cstNode, 'name');\r\n    }\r\n}\r\n"],"mappings":"AAAA;;;;;AAOA,SAASA,mBAAmB,QAAQ,2BAA2B;AAM/D,OAAM,SAAUC,OAAOA,CAACC,IAAa;EACjC,OAAO,OAAQA,IAAqB,CAACC,IAAI,KAAK,QAAQ;AAC1D;AAkBA,OAAM,MAAOC,mBAAmB;EAC5BC,OAAOA,CAACH,IAAa;IACjB,IAAID,OAAO,CAACC,IAAI,CAAC,EAAE;MACf,OAAOA,IAAI,CAACC,IAAI;IACpB;IACA,OAAOG,SAAS;EACpB;EAEAC,WAAWA,CAACL,IAAa;IACrB,OAAOF,mBAAmB,CAACE,IAAI,CAACM,QAAQ,EAAE,MAAM,CAAC;EACrD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}